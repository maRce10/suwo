read.table("/tmp/RtmptasZH3/file2a002b5727ee", check.names = FALSE)[, 2]
read.table("/tmp/RtmptasZH3/file2a002b5727ee", header = FALSE, check.names = FALSE)[, 2]
suppressWarnings(token <- read.table("/tmp/RtmptasZH3/file2a002b5727ee")[, 2])
token
term = "phaethornis guy""
#format JSON
term <- gsub(" ", "%20", term)
term = "phaethornis guy"
#format JSON
term <- gsub(" ", "%20", term)
srch_trm <- paste0("https://observation.org/api/v1/species/search/?", "q=", term)
base.srch.pth <- jsonlite::fromJSON(srch_trm)
base.srch.pth$results
library(RCurl)
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
query_observation(term = "phaethornis guy")
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
query_observation(term = "phaethornis guy", type = "Still image")
query_observation(term = "phaethornis guy", type = "still image")
source("~/.active-rstudio-document", echo=TRUE)
client_id <- "EH058SakEQu4UA1EpPrk3fy8b6HEAKN8Kec6lGzj"
email <- "george.andres2@gmail.com"
password  <- "Ads8SEVzPCd.sP2"
tmpfile <- tempfile()
qo <- query_observation(term = "a", token = "")
call <- paste0("curl -X POST https://observation.org/api/v1/oauth2/token/ -d 'client_id=", client_id, "&grant_type=password", "&email=", email, "&password=", password, "' > ", tmpfile)
system(call)
suppressWarnings(token <- read.table("/tmp/RtmptasZH3/file2a002b5727ee")[, 2])
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
query_observation(term = "phaethornis guy", type = "Still image")
query_observation(term = "phaethornis guy", type = "still image")
library(jsonlite)
query_observation(term = "phaethornis guy", type = "still image")
source("~/Dropbox/R_package_testing/suwo/R/internal_functions.R")
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
query_observation(term = "phaethornis guy", type = "still image")
obs <- query_observation(term = "phaethornis guy", type = "still image")
View(obs)
# Set the species ID and API endpoint URL
species_id <- base.srch.pth$results$id
#format JSON
term <- gsub(" ", "%20", term)
term = "phaethornis guy"
#format JSON
term <- gsub(" ", "%20", term)
srch_trm <- paste0("https://observation.org/api/v1/species/search/?", "q=", term)
base.srch.pth <- jsonlite::fromJSON(srch_trm)
library(RCurl)
library(jsonlite)
# Set the species ID and API endpoint URL
species_id <- base.srch.pth$results$id
url_inquiry <- paste0("https://observation.org/api/v1/species/", species_id, "/observations/?limit=100")
# Set the authorization header with your bearer token
bearer_token <- token
headers <- c("Authorization" = paste("Bearer", bearer_token))
# Make the GET request and retrieve the response
dataURL <- getURL(url_inquiry, httpheader = headers)
#JSON format
data <- fromJSON(dataURL)
View(data)
View(data$results)
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
obs <- query_observation(term = "phaethornis guy", type = "still image")
View(obs)
u = 1
x <- data$results[u, ]
u = 51
x <- data$results[u, ]
# media_df <- do.call(rbind, media_list)
photos_df <- as.data.frame(x$photos)
media_URL_photos <- do.call(rbind, photos_df)
media_URL_photos
View(media_URL_photos)
# media_df <- do.call(rbind, media_list)
photos_df <- as.list(x$photos)
photos_df
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
obs <- query_observation(term = "phaethornis guy", type = "still image")
View(obs)
media_URL_photos <- do.call(rbind, photos_list)
# media_df <- do.call(rbind, media_list)
photos_list <- as.list(x$photos)
media_URL_photos <- do.call(rbind, photos_list)
media_URL_photos
View(media_URL_photos)
# media_df <- do.call(rbind, media_list)
photos_list <- as.list(x$photos)
media_URL_photos <- do.call(cbind, photos_list)
media_URL_photos
View(media_URL_photos)
x <- data$results[u, ]
media_URL_photos <- do.call(cbind, photos_list)
x <- data$results[u, ]
media_URL_photos <- do.call(cbind, x$photos)
View(media_URL_photos)
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
obs <- query_observation(term = "phaethornis guy", type = "still image")
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
obs <- query_observation(term = "phaethornis guy", type = "still image")
x <- data$results[u, ]
media_URL_photos <- do.call(cbind, as.list(x$photos))
media_URL_photos
x <- data$results[u, ]
media_URL_photos <- do.call(rbind, as.list(x$photos))
View(media_URL_photos)
source("~/Dropbox/R_package_testing/suwo/R/query_gbif.R")
query_gbif(term="phaethornis guy", type = "still image")
quer <- query_gbif(term="phaethornis guy", type = "still image")
View(quer)
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
obs <- query_observation(term = "phaethornis guy", type = "still image")
View(obs)
term = "phaethornis guy"
type = "still image"
cores = 1
pb = TRUE
verbose = TRUE
# term must be supplied
if (is.null(term))
stop2("'term' must be supplied")
org_type <- match.arg(type)
type <- switch(type,
sound = "Sound",
`still image` = "StillImage",
`moving image` = "MovingImage",
`interactive resource` = "InteractiveResource")
if (type != "StillImage")
stop2("Stillimage is the only available 'type' currently")
# If cores is not numeric
if (!is.numeric(cores))
stop2("'cores' must be a numeric vector of length 1")
if (any(!(cores %% 1 == 0), cores < 1))
stop2("'cores' should be a positive integer")
#format JSON
term <- gsub(" ", "%20", term)
srch_trm <- paste0("https://observation.org/api/v1/species/search/?", "q=", term)
base.srch.pth <- jsonlite::fromJSON(srch_trm)
library(RCurl)
library(jsonlite)
# Set the species ID and API endpoint URL
species_id <- base.srch.pth$results$id
url_inquiry <- paste0("https://observation.org/api/v1/species/", species_id, "/observations/?limit=100")
# Set the authorization header with your bearer token
bearer_token <- token
headers <- c("Authorization" = paste("Bearer", bearer_token))
# Make the GET request and retrieve the response
dataURL <- getURL(url_inquiry, httpheader = headers)
#JSON format
data <- fromJSON(dataURL)
if (data$count == 0 & verbose)
cat(paste(colortext(paste0("No ", tolower(org_type), "s were found"), "failure"), add_emoji("sad"))) else {
# message number of results
if (pb & verbose)
cat(paste(colortext(paste0("Obtaining metadata (", data$count, "matching observation(s) found)"), "success"), add_emoji("happy"), ":\n"))
}
# get total number of pages
offsets <- (seq_len(ceiling(data$count / 100)) - 1) * 100
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
query_output_list <- pblapply_sw_int(offsets, cl = 1, pbar = pb, function(i)
{
srch_trm <- paste0("https://observation.org/api/v1/species/", species_id, "/observations/?limit=100")
dataURL <- getURL(paste0(srch_trm, "&offset=", i), httpheader = headers)
#JSON format
data <- fromJSON(dataURL)
# format as list of data frame
data$results <- lapply(seq_len(nrow(data$results)), function(u) {
x <- data$results[u, ]
# media_df <- do.call(rbind, media_list)
# photos_list <- as.list(x$photos)
media_URL_photos <- do.call(rbind, x$photos)
#media_URL_sounds <- x$sounds
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- cbind(X_df,media_URL_photos)
return(X_df)
})
# get common names to all data frames in X
common_names <- unique(unlist(lapply(data$results, names)))
# add missing columns to all data frames in X
data$results <- lapply(data$results, function(e){
nms <- names(e)
if (length(nms) != length(common_names))
for (o in common_names[!common_names %in% nms]) {
e <-
data.frame(e,
NA,
stringsAsFactors = FALSE,
check.names = FALSE)
names(e)[ncol(e)] <- o
}
return(e)
})
# all results in a single data frame
output_df <- do.call(rbind, data$results)
output_df$page <- i/100
return(output_df)
})
query_output_list
query_output_list[[1]]
offsets
offsets <- 0
i <- 0
srch_trm <- paste0("https://observation.org/api/v1/species/", species_id, "/observations/?limit=100")
dataURL <- getURL(paste0(srch_trm, "&offset=", i), httpheader = headers)
#JSON format
data <- fromJSON(dataURL)
# format as list of data frame
data$results <- lapply(seq_len(nrow(data$results)), function(u) {
x <- data$results[u, ]
# media_df <- do.call(rbind, media_list)
# photos_list <- as.list(x$photos)
media_URL_photos <- do.call(rbind, x$photos)
#media_URL_sounds <- x$sounds
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- cbind(X_df,media_URL_photos)
return(X_df)
})
data$results
u = 51
x <- data$results[u, ]
media_URL_photos <- do.call(rbind, x$photos)
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- cbind(X_df,media_URL_photos)
x <- data$results[u, ]
u
seq_len(nrow(data$results))
# Set the species ID and API endpoint URL
species_id <- base.srch.pth$results$id
url_inquiry <- paste0("https://observation.org/api/v1/species/", species_id, "/observations/?limit=100")
# Set the authorization header with your bearer token
bearer_token <- token
headers <- c("Authorization" = paste("Bearer", bearer_token))
# Make the GET request and retrieve the response
dataURL <- getURL(url_inquiry, httpheader = headers)
#JSON format
data <- fromJSON(dataURL)
x <- data$results[u, ]
media_URL_photos <- do.call(rbind, x$photos)
media_URL_photos
x
x$photos
View(media_URL_photos)
length(x$photos)
length(x$photos[[1]])
View(data)
View(data$results)
unlist(x$photos)
media_URL_photos <- unlist(x$photos)
media_URL_photos
# remove lists
x <- x[!sapply(x, is.list)]
media_URL_photos <- unlist(x$photos)
# remove lists
x <- x[!sapply(x, is.list)]
x
str(x)
# add media details
X_df <- cbind(x, media_URL)
media_URL <- unlist(x$photos)
# remove lists
x <- x[!sapply(x, is.list)]
# add media details
X_df <- cbind(x, media_URL)
X_df
# add media details
X_df <- data.frame(x, media_URL)
media_URL
media_URL <- unlist(x$photos)
x <- data$results[u, ]
media_URL <- unlist(x$photos)
# remove lists
x <- x[!sapply(x, is.list)]
# add media details
X_df <- data.frame(x, media_URL)
x
data.frame(x, media_URL)
x <- data$results[u, ]
media_URL <- unlist(x$photos)
# remove lists
x <- x[!sapply(x, is.list)]
# add media details
X_df <- data.frame(x, media_URL, check.rows = FALSE)
# add media details
X_df <- data.frame(x, media_URL, check.names = FALSE)
seq_len(x)
seq_len(length(media_URL))
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
X_df
# format as list of data frame
data$results <- lapply(seq_len(nrow(data$results)), function(u) {
x <- data$results[u, ]
# media_df <- do.call(rbind, media_list)
# photos_list <- as.list(x$photos)
media_URL <- unlist(x$photos)
#media_URL_sounds <- x$sounds
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
# X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
return(X_df)
})
#JSON format
data <- fromJSON(dataURL)
# format as list of data frame
data$results <- lapply(seq_len(nrow(data$results)), function(u) {
x <- data$results[u, ]
# media_df <- do.call(rbind, media_list)
# photos_list <- as.list(x$photos)
media_URL <- unlist(x$photos)
#media_URL_sounds <- x$sounds
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
# X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
return(X_df)
})
# format as list of data frame
data$results <- lapply(seq_len(nrow(data$results)), function(u) {
print(u)
x <- data$results[u, ]
# media_df <- do.call(rbind, media_list)
# photos_list <- as.list(x$photos)
media_URL <- unlist(x$photos)
#media_URL_sounds <- x$sounds
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
# X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
return(X_df)
})
u = 2
x <- data$results[u, ]
media_URL <- unlist(x$photos)
# remove lists
x <- x[!sapply(x, is.list)]
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
x
media_URL
x$photos
x <- data$results[u, ]
media_URL <- if (!is.null(x$photos))
unlist(x$photos) else
NA
# remove lists
x <- x[!sapply(x, is.list)]
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
media_URL
x <- data$results[u, ]
x$photos
length(x$photos)
length(x$photos[[1]])
length(x$photos[[1]]) > 0
x <- data$results[u, ]
media_URL <- if (length(x$photos[[1]]) > 0)
unlist(x$photos) else
NA
# remove lists
x <- x[!sapply(x, is.list)]
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
X_df
# format as list of data frame
data$results <- lapply(seq_len(nrow(data$results)), function(u) {
print(u)
x <- data$results[u, ]
# media_df <- do.call(rbind, media_list)
# photos_list <- as.list(x$photos)
media_URL <- if (length(x$photos[[1]]) > 0)
unlist(x$photos) else
NA
#media_URL_sounds <- x$sounds
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
# X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
return(X_df)
})
# get common names to all data frames in X
common_names <- unique(unlist(lapply(data$results, names)))
common_names
# add missing columns to all data frames in X
data$results <- lapply(data$results, function(e){
nms <- names(e)
if (length(nms) != length(common_names))
for (o in common_names[!common_names %in% nms]) {
e <-
data.frame(e,
NA,
stringsAsFactors = FALSE,
check.names = FALSE)
names(e)[ncol(e)] <- o
}
return(e)
})
# all results in a single data frame
output_df <- do.call(rbind, data$results)
output_df$page <- i/100
output_df$page
query_output_list <- pblapply_sw_int(offsets, cl = 1, pbar = pb, function(i)
{
srch_trm <- paste0("https://observation.org/api/v1/species/", species_id, "/observations/?limit=100")
dataURL <- getURL(paste0(srch_trm, "&offset=", i), httpheader = headers)
#JSON format
data <- fromJSON(dataURL)
# format as list of data frame
data$results <- lapply(seq_len(nrow(data$results)), function(u) {
x <- data$results[u, ]
# media_df <- do.call(rbind, media_list)
# photos_list <- as.list(x$photos)
media_URL <- if (length(x$photos[[1]]) > 0)
unlist(x$photos) else
NA
#media_URL_sounds <- x$sounds
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
# X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
return(X_df)
})
# get common names to all data frames in X
common_names <- unique(unlist(lapply(data$results, names)))
# add missing columns to all data frames in X
data$results <- lapply(data$results, function(e){
nms <- names(e)
if (length(nms) != length(common_names))
for (o in common_names[!common_names %in% nms]) {
e <-
data.frame(e,
NA,
stringsAsFactors = FALSE,
check.names = FALSE)
names(e)[ncol(e)] <- o
}
return(e)
})
# all results in a single data frame
output_df <- do.call(rbind, data$results)
output_df$page <- (i/100) + 1
return(output_df)
})
# get common names to all data frames in X
common_names <- unique(unlist(lapply(query_output_list, names)))
# add missing columns to all data frames in X
query_output_list<- lapply(query_output_list, function(e){
nms <- names(e)
if (length(nms) != length(common_names))
for (o in common_names[!common_names %in% nms]) {
e <-
data.frame(e,
NA,
stringsAsFactors = FALSE,
check.names = FALSE)
names(e)[ncol(e)] <- o
}
return(e)
})
# all results in a single data frame
query_output_df <- do.call(rbind, query_output_list)
#Change column name for media download function
colnames(query_output_df)[colnames(query_output_df) == "media_URL"] <- "file_url"
#Add repository ID
query_output_df$repository <- "Observation"
View(query_output_df)
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
qo <- query_observation(term = "Phaethornis guy", type = "still image")
View(qo)
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
qo <- query_observation(term = "Phaethornis guy", type = "still image")
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
qo <- query_observation(term = "Phaethornis guy", type = "still image")
View(qo)
data
length(data$results)
#JSON format
data <- fromJSON(dataURL)
length(data$results)
# Make the GET request and retrieve the response
dataURL <- getURL(url_inquiry, httpheader = headers)
#JSON format
data <- fromJSON(dataURL)
data
data$results
data$results$permalink
data$results$sounds
data$results$photos
unlist(data$results$photos)
