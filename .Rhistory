# make it data frame
X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- cbind(X_df,media_URL_photos)
return(X_df)
})
data$results
u = 51
x <- data$results[u, ]
media_URL_photos <- do.call(rbind, x$photos)
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- cbind(X_df,media_URL_photos)
x <- data$results[u, ]
u
seq_len(nrow(data$results))
# Set the species ID and API endpoint URL
species_id <- base.srch.pth$results$id
url_inquiry <- paste0("https://observation.org/api/v1/species/", species_id, "/observations/?limit=100")
# Set the authorization header with your bearer token
bearer_token <- token
headers <- c("Authorization" = paste("Bearer", bearer_token))
# Make the GET request and retrieve the response
dataURL <- getURL(url_inquiry, httpheader = headers)
#JSON format
data <- fromJSON(dataURL)
x <- data$results[u, ]
media_URL_photos <- do.call(rbind, x$photos)
media_URL_photos
x
x$photos
View(media_URL_photos)
length(x$photos)
length(x$photos[[1]])
View(data)
View(data$results)
unlist(x$photos)
media_URL_photos <- unlist(x$photos)
media_URL_photos
# remove lists
x <- x[!sapply(x, is.list)]
media_URL_photos <- unlist(x$photos)
# remove lists
x <- x[!sapply(x, is.list)]
x
str(x)
# add media details
X_df <- cbind(x, media_URL)
media_URL <- unlist(x$photos)
# remove lists
x <- x[!sapply(x, is.list)]
# add media details
X_df <- cbind(x, media_URL)
X_df
# add media details
X_df <- data.frame(x, media_URL)
media_URL
media_URL <- unlist(x$photos)
x <- data$results[u, ]
media_URL <- unlist(x$photos)
# remove lists
x <- x[!sapply(x, is.list)]
# add media details
X_df <- data.frame(x, media_URL)
x
data.frame(x, media_URL)
x <- data$results[u, ]
media_URL <- unlist(x$photos)
# remove lists
x <- x[!sapply(x, is.list)]
# add media details
X_df <- data.frame(x, media_URL, check.rows = FALSE)
# add media details
X_df <- data.frame(x, media_URL, check.names = FALSE)
seq_len(x)
seq_len(length(media_URL))
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
X_df
# format as list of data frame
data$results <- lapply(seq_len(nrow(data$results)), function(u) {
x <- data$results[u, ]
# media_df <- do.call(rbind, media_list)
# photos_list <- as.list(x$photos)
media_URL <- unlist(x$photos)
#media_URL_sounds <- x$sounds
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
# X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
return(X_df)
})
#JSON format
data <- fromJSON(dataURL)
# format as list of data frame
data$results <- lapply(seq_len(nrow(data$results)), function(u) {
x <- data$results[u, ]
# media_df <- do.call(rbind, media_list)
# photos_list <- as.list(x$photos)
media_URL <- unlist(x$photos)
#media_URL_sounds <- x$sounds
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
# X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
return(X_df)
})
# format as list of data frame
data$results <- lapply(seq_len(nrow(data$results)), function(u) {
print(u)
x <- data$results[u, ]
# media_df <- do.call(rbind, media_list)
# photos_list <- as.list(x$photos)
media_URL <- unlist(x$photos)
#media_URL_sounds <- x$sounds
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
# X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
return(X_df)
})
u = 2
x <- data$results[u, ]
media_URL <- unlist(x$photos)
# remove lists
x <- x[!sapply(x, is.list)]
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
x
media_URL
x$photos
x <- data$results[u, ]
media_URL <- if (!is.null(x$photos))
unlist(x$photos) else
NA
# remove lists
x <- x[!sapply(x, is.list)]
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
media_URL
x <- data$results[u, ]
x$photos
length(x$photos)
length(x$photos[[1]])
length(x$photos[[1]]) > 0
x <- data$results[u, ]
media_URL <- if (length(x$photos[[1]]) > 0)
unlist(x$photos) else
NA
# remove lists
x <- x[!sapply(x, is.list)]
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
X_df
# format as list of data frame
data$results <- lapply(seq_len(nrow(data$results)), function(u) {
print(u)
x <- data$results[u, ]
# media_df <- do.call(rbind, media_list)
# photos_list <- as.list(x$photos)
media_URL <- if (length(x$photos[[1]]) > 0)
unlist(x$photos) else
NA
#media_URL_sounds <- x$sounds
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
# X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
return(X_df)
})
# get common names to all data frames in X
common_names <- unique(unlist(lapply(data$results, names)))
common_names
# add missing columns to all data frames in X
data$results <- lapply(data$results, function(e){
nms <- names(e)
if (length(nms) != length(common_names))
for (o in common_names[!common_names %in% nms]) {
e <-
data.frame(e,
NA,
stringsAsFactors = FALSE,
check.names = FALSE)
names(e)[ncol(e)] <- o
}
return(e)
})
# all results in a single data frame
output_df <- do.call(rbind, data$results)
output_df$page <- i/100
output_df$page
query_output_list <- pblapply_sw_int(offsets, cl = 1, pbar = pb, function(i)
{
srch_trm <- paste0("https://observation.org/api/v1/species/", species_id, "/observations/?limit=100")
dataURL <- getURL(paste0(srch_trm, "&offset=", i), httpheader = headers)
#JSON format
data <- fromJSON(dataURL)
# format as list of data frame
data$results <- lapply(seq_len(nrow(data$results)), function(u) {
x <- data$results[u, ]
# media_df <- do.call(rbind, media_list)
# photos_list <- as.list(x$photos)
media_URL <- if (length(x$photos[[1]]) > 0)
unlist(x$photos) else
NA
#media_URL_sounds <- x$sounds
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
# X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
return(X_df)
})
# get common names to all data frames in X
common_names <- unique(unlist(lapply(data$results, names)))
# add missing columns to all data frames in X
data$results <- lapply(data$results, function(e){
nms <- names(e)
if (length(nms) != length(common_names))
for (o in common_names[!common_names %in% nms]) {
e <-
data.frame(e,
NA,
stringsAsFactors = FALSE,
check.names = FALSE)
names(e)[ncol(e)] <- o
}
return(e)
})
# all results in a single data frame
output_df <- do.call(rbind, data$results)
output_df$page <- (i/100) + 1
return(output_df)
})
# get common names to all data frames in X
common_names <- unique(unlist(lapply(query_output_list, names)))
# add missing columns to all data frames in X
query_output_list<- lapply(query_output_list, function(e){
nms <- names(e)
if (length(nms) != length(common_names))
for (o in common_names[!common_names %in% nms]) {
e <-
data.frame(e,
NA,
stringsAsFactors = FALSE,
check.names = FALSE)
names(e)[ncol(e)] <- o
}
return(e)
})
# all results in a single data frame
query_output_df <- do.call(rbind, query_output_list)
#Change column name for media download function
colnames(query_output_df)[colnames(query_output_df) == "media_URL"] <- "file_url"
#Add repository ID
query_output_df$repository <- "Observation"
View(query_output_df)
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
qo <- query_observation(term = "Phaethornis guy", type = "still image")
View(qo)
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
qo <- query_observation(term = "Phaethornis guy", type = "still image")
source("~/Dropbox/R_package_testing/suwo/R/query_observation.R")
qo <- query_observation(term = "Phaethornis guy", type = "still image")
View(qo)
data
length(data$results)
#JSON format
data <- fromJSON(dataURL)
length(data$results)
# Make the GET request and retrieve the response
dataURL <- getURL(url_inquiry, httpheader = headers)
#JSON format
data <- fromJSON(dataURL)
data
data$results
data$results$permalink
data$results$sounds
data$results$photos
unlist(data$results$photos)
source("~/Documentos/GitHub/suwo/R/internal_functions.R", echo=TRUE)
source("~/Documentos/GitHub/suwo/R/query_observation.R", echo=TRUE)
query_observation("turdus grayi", type = "still image")
install.packages("RCrul")
install.packages("RCurl")
query_observation("turdus grayi", type = "still image")
library(RCurl)
install.packages(RCurl)
install.packages("RCurl")
token = "uRCV1wSMhMUrKgzpsN1V6IUnvJl0Vl"
devtools::load_all(".")
df1 <- query_observation(term = 'Glaucis aeneus', type = "still image", token = token, cores = 1)
i <- 200
u <- 37
term = 'Glaucis aeneus'
type = "still image"
cores = 1
type <-
"StillImage"
# If cores is not numeric
if (!is.numeric(cores))
stop2("'cores' must be a numeric vector of length 1")
if (any(!(cores %% 1 == 0), cores < 1))
stop2("'cores' should be a positive integer")
#format JSON
term <- gsub(" ", "%20", term)
srch_trm <- paste0("https://observation.org/api/v1/species/search/?", "q=", term)
base.srch.pth <- jsonlite::fromJSON(srch_trm)
# If species not found in repository
if (base.srch.pth$count==0)
stop2("Species was not found in database")
library(RCurl)
library(jsonlite)
# Set the species ID and API endpoint URL
species_id <- base.srch.pth$results$id
url_inquiry <- paste0("https://observation.org/api/v1/species/", species_id, "/observations/?limit=100")
# Set the authorization header with your bearer token
bearer_token <- token
headers <- c("Authorization" = paste("Bearer", bearer_token))
# Make the GET request and retrieve the response
dataURL <- getURL(url_inquiry, httpheader = headers)
#JSON format
data <- fromJSON(dataURL)
data_org <- data
# message number of results
if (pb & verbose)
cat(paste(colortext(paste0("Obtaining metadata (matching observation(s) found)"), "success"), add_emoji("happy"), ":\n"))
# get total number of pages
offsets <- (seq_len(ceiling(data$count / 100)) - 1) * 100
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
query_output_list <- pblapply_sw_int(offsets, cl = 1, pbar = pb, function(i)
{
print(i)
#
srch_trm <- paste0("https://observation.org/api/v1/species/", species_id, "/observations/?limit=100")
dataURL <- getURL(paste0(srch_trm, "&offset=", i), httpheader = headers)
#JSON format
data <- fromJSON(dataURL)
# format as list of data frame
data$results <- lapply(seq_len(nrow(data$results)), function(u) {
x <- data$results[u, ]
print(u)
if(type == "StillImage"){
media_URL <- if (length(x$photos[[1]]) > 0)
unlist(x$photos) else
NA
}
if(type == "Sound"){
media_URL <- if (length(x$sounds[[1]]) > 0)
unlist(x$sounds) else
NA
}
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
# X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
# remove NAs
X_df <- X_df[!is.na(X_df$media_URL), ]
X_df$species_name <- if (nrow(X_df) > 0) data_org$results$species_detail$scientific_name[u] else vector(mode= "character")
return(X_df)
})
# get common names to all data frames in X
common_names <- unique(unlist(lapply(data$results, names)))
# add missing columns to all data frames in X
data$results <- lapply(data$results, function(e){
nms <- names(e)
if (length(nms) != length(common_names))
for (o in common_names[!common_names %in% nms]) {
e <-
data.frame(e,
NA,
stringsAsFactors = FALSE,
check.names = FALSE)
names(e)[ncol(e)] <- o
}
return(e)
})
# all results in a single data frame
output_df <- do.call(rbind, data$results)
output_df$page <- if (nrow(output_df) > 1) i/100 else vector(length = 0L)
return(output_df)
})
# get common names to all data frames in X
common_names <- unique(unlist(lapply(query_output_list, names)))
# add missing columns to all data frames in X
query_output_list<- lapply(query_output_list, function(e){
nms <- names(e)
if (length(nms) != length(common_names))
for (o in common_names[!common_names %in% nms]) {
e <-
data.frame(e,
NA,
stringsAsFactors = FALSE,
check.names = FALSE)
names(e)[ncol(e)] <- o
}
return(e)
})
# all results in a single data frame
query_output_df <- do.call(rbind, query_output_list)
#Change column name for media download function
colnames(query_output_df)[colnames(query_output_df) == "media_URL"] <- "file_url"
colnames(query_output_df)[colnames(query_output_df) == "id"] <- "key"
colnames(query_output_df)[colnames(query_output_df) == "species"] <- "species_code"
colnames(query_output_df)[colnames(query_output_df) == "species_name"] <- "species"
#Add repository ID
query_output_df$repository <- "Observation"
query_output_df <- subset(query_output_df, select = -c(page))
source("~/Documentos/GitHub/suwo/R/query_observation.R")
df1 <- query_observation(term = 'Glaucis aeneus', type = "still image", token = token, cores = 1)
source("~/Documentos/GitHub/suwo/R/query_observation.R")
i
u
df1 <- query_observation(term = 'Glaucis aeneus', type = "still image", token = token, cores = 1)
term
i
offsets
print(i)
#
srch_trm <- paste0("https://observation.org/api/v1/species/", species_id, "/observations/?limit=100")
dataURL <- getURL(paste0(srch_trm, "&offset=", i), httpheader = headers)
#JSON format
data <- fromJSON(dataURL)
# format as list of data frame
data$results <- lapply(seq_len(nrow(data$results)), function(u) {
x <- data$results[u, ]
print(u)
if(type == "StillImage"){
media_URL <- if (length(x$photos[[1]]) > 0)
unlist(x$photos) else
NA
}
if(type == "Sound"){
media_URL <- if (length(x$sounds[[1]]) > 0)
unlist(x$sounds) else
NA
}
# remove lists
x <- x[!sapply(x, is.list)]
# make it data frame
# X_df <- data.frame(t(unlist(x)))
# add media details
X_df <- data.frame(x, media_URL, row.names = seq_len(length(media_URL)))
# remove NAs
X_df <- X_df[!is.na(X_df$media_URL), ]
X_df$species_name <- if (nrow(X_df) > 0) data_org$results$species_detail$scientific_name[u] else vector(mode= "character")
return(X_df)
})
source("~/Documentos/GitHub/suwo/R/query_observation.R")
source("~/Documentos/GitHub/suwo/R/query_observation.R")
df1 <- query_observation2(term = 'Glaucis aeneus', type = "still image", token = token, cores = 1)
df1
source("~/Documentos/GitHub/suwo/R/query_observation.R", echo=TRUE)
df1 <- query_observation(term = 'Glaucis aeneus', type = "still image", token = token, cores = 1)
token = "uRCV1wSMhMUrKgzpsN1V6IUnvJl0Vl"
df1 <- query_observation(term = 'Glaucis aeneus', type = "still image", token = token, cores = 1)
expect_true(nrow(df1) >= 237)
nrow(df1)
View(df1)
source("~/Documentos/GitHub/suwo/tests/testthat/test_query_observation.R", echo=TRUE)
library(testthat)
test_that("search Glaucis dohrnii still image", {
df1 <- query_observation(term = 'Glaucis dohrnii', type = "still image", token = token)
# system(paste("firefox", df1$link[1]))
expect_true(nrow(df1) >= 1)
})
test_that("search Glaucis dohrnii still image", {
df1 <- query_observation(term = 'Glaucis dohrnii', type = "still image", token = token)
# system(paste("firefox", df1$link[1]))
expect_true(nrow(df1) >= 1)
})
df1 <- query_observation(term = 'Glaucis dohrnii', type = "still image", token = token)
df1 <- query_observation(term = 'Glaucis aeneus', type = "still image", token = token, cores = 1)
df1 <- query_observation(term = 'Glaucis aeneus', type = "still image", token = token, cores = 1)
df1 <- query_observation(term = 'Glaucis dohrnii', type = "still image", token = token)
source("~/Documentos/GitHub/suwo/R/query_observation.R", echo=TRUE)
df1 <- query_observation2(term = 'Glaucis dohrnii', type = "still image", token = token)
source("~/Documentos/GitHub/suwo/R/query_observation.R", echo=TRUE)
df1 <- query_observation2(term = 'Glaucis dohrnii', type = "still image", token = token)
source("~/Documentos/GitHub/suwo/R/query_observation.R")
source("~/Documentos/GitHub/suwo/R/query_observation.R")
source("~/Documentos/GitHub/suwo/R/query_observation.R")
source("~/Documentos/GitHub/suwo/R/query_observation.R")
source("~/Documentos/GitHub/suwo/R/query_observation.R", echo=TRUE)
df1 <- query_observation2(term = 'Glaucis dohrnii', type = "still image", token = token)
df1 <- query_observation2(term = 'Glaucis dohrnii', type = "still image", token = token)
source("~/Documentos/GitHub/suwo/tests/testthat/test_query_observation.R", echo=TRUE)
a <- "aalychnis lemur"
type(a)
class(a)
source("~/Documentos/GitHub/suwo/R/query_gbif.R", echo=TRUE)
source("~/Documentos/GitHub/suwo/R/internal_functions.R", echo=TRUE)
query_gbif(term = "phaethornis guy", type = "still image")
a <- query_gbif(term = "phaethornis guy", type = "still image")
a
a <- query_gbif(term = 1, type = "still image")
