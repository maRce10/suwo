})
test_that("search wikiaves Glaucis dohrnii sp names", {
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "s")[1:2, ]
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Glaucis-dohrnii-XC427418.mp3",
"Glaucis-dohrnii-XC618872.mp3"))
})
source("~/Dropbox/R_package_testing/suwo/R/query_wikiaves.R")
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
test_that("search wikiaves Glaucis dohrnii sp names", {
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "s")[1:2, ]
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Glaucis-dohrnii-XC427418.mp3",
"Glaucis-dohrnii-XC618872.mp3"))
})
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "s")[1:2, ]
df1
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "s")
df1
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "audio")
df1
test_that("search wikiaves Glaucis dohrnii sp names", {
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "audio")[1:2, ]
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Glaucis-dohrnii-XC427418.mp3",
"Glaucis-dohrnii-XC618872.mp3"))
})
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "audio")[1:2, ]
download_media(metadata = df1, path = tempdir())
query_gbif("homo sapien", type = "still image")
query_gbif("Homo sapien", type = "still image")
df1 <- query_gbif(term = 'Homo sapien', type =  "still image")
test_that("search wikiaves Glaucis dohrnii sp names", {
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "audio")[1:2, ]
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Glaucis-dohrnii-XC427418.mp3",
"Glaucis-dohrnii-XC618872.mp3"))
})
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "audio")[1:2, ]
download_media(metadata = df1, path = tempdir())
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "audio")[1:2, ]
is.data.frame(df1)
df1
if (metadata$repository[x] == "XC"){
download.file(
url = paste("https://xeno-canto.org/", metadata$file_url[x], "/download", sep = ""),
destfile = file.path(path, metadata$media.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
return (NULL)
} else if (metadata$repository[x] == "wikiaves"){
download.file(
url = as.character(metadata$file_url[x]),
destfile = file.path(path, metadata$media.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
return (NULL)
} else if (metadata$repository[x] == "GBIF"){
download.file(
url = as.character(metadata$file_url[x]),
destfile = file.path(path, metadata$media.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
return (NULL)
}
metadata <- df1
if (metadata$repository[x] == "XC"){
download.file(
url = paste("https://xeno-canto.org/", metadata$file_url[x], "/download", sep = ""),
destfile = file.path(path, metadata$media.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
return (NULL)
} else if (metadata$repository[x] == "wikiaves"){
download.file(
url = as.character(metadata$file_url[x]),
destfile = file.path(path, metadata$media.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
return (NULL)
} else if (metadata$repository[x] == "GBIF"){
download.file(
url = as.character(metadata$file_url[x]),
destfile = file.path(path, metadata$media.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
return (NULL)
}
metadata$repository[x] == "GBIF"
download.file(metadata[1,],path = tempdir())
download.file(metadata[1,],destfile = tempdir())
download.file(metadata$file_url[1,],destfile = tempdir())
download.file(metadata$file_url[,1],destfile = tempdir())
download.file(metadata$file_url,destfile = tempdir())
metadata$file_url
metadata$file_url[1]
download.file(metadata$file_url[1],destfile = tempdir())
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "audio")[1:2, ]
download_media(metadata = df1, path = "Home/Downloads")
path = "Home/Downloads"
destfile = file.path(path, metadata$media.files[1])
destfile
metadata
destfile = file.path(path, metadata$file_url[1])
destfile
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "audio")[1:2, ]
download_media(metadata = df1, path = "Home/Downloads")
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "audio")[1:2, ]
download_media(metadata = df1, path = "Home/Downloads")
download_media(metadata = df1, path = "neuro/Downloads")
download_media(metadata = df1, path = "~/Downloads")
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(metadata = df1, path = "~/Downloads")
test_that("search XC Phaethornis anthophilus default file names", {
a
df1 <- query_xenocanto(term = 'Phaethornis anthophilus')[1:2, ]
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("XC532163.mp3", "XC568491.mp3"))
})
test_that("search XC Phaethornis anthophilus default file names", {
df1 <- query_xenocanto(term = 'Phaethornis anthophilus')[1:2, ]
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("XC532163.mp3", "XC568491.mp3"))
})
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "audio")[1:2, ]
download_media(metadata = df1, path = "~/Downloads")
download_media(metadata = df1, path = "~/Downloads")
fls <- list.files(path = tempdir(), pattern = "mp3$")
fls
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(metadata = df1, path = "~/Downloads")
destfile = file.path(path,"/" , metadata$url[1])
destfile
metadata
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(metadata = df1, path = "~/Downloads")
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(metadata = df1, path = "~/Downloads")
metadata
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(metadata = df1, path = "~/Downloads")
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Glaucis-dohrnii-XC427418.mp3",
"Glaucis-dohrnii-XC618872.mp3"))
fls
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "audio")[1:2, ]
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
fls
download_media(url = "https://s3.amazonaws.com/media.wikiaves.com.br/recordings/548/845065_025cc34ff36154e834a8240cb02fd261.mp3", destfile = "~/Downloads")
download_media(url = "https://s3.amazonaws.com/media.wikiaves.com.br/recordings/548/845065_025cc34ff36154e834a8240cb02fd261.mp3", destfile = "~/Downloads/output.mp3")
download_media(url = "https://s3.amazonaws.com/media.wikiaves.com.br/recordings/548/845065_025cc34ff36154e834a8240cb02fd261.mp3", destfile = "~/Downloads/https://s3.amazonaws.com/media.wikiaves.com.br/recordings/548/845065_025cc34ff36154e834a8240cb02fd261.mp3")
download_file(url = "https://s3.amazonaws.com/media.wikiaves.com.br/recordings/548/845065_025cc34ff36154e834a8240cb02fd261.mp3", destfile = "~/Downloads/https://s3.amazonaws.com/media.wikiaves.com.br/recordings/548/845065_025cc34ff36154e834a8240cb02fd261.mp3")
download.file(url = "https://s3.amazonaws.com/media.wikiaves.com.br/recordings/548/845065_025cc34ff36154e834a8240cb02fd261.mp3", destfile = "~/Downloads/https://s3.amazonaws.com/media.wikiaves.com.br/recordings/548/845065_025cc34ff36154e834a8240cb02fd261.mp3")
download.file(url = "https://s3.amazonaws.com/media.wikiaves.com.br/recordings/548/845065_025cc34ff36154e834a8240cb02fd261.mp3", destfile = "~/Downloads/out.mp3")
query_gbif("hirundo",type = "sound")
query_gbif("hirundo rustica",type = "sound")
query_gbif("Glaucis dohrnii",type = "sound")
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
df1 <- query_gbif(term = 'Glaucis dohrnii')[1:2, ]
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
fls
fls <- list.files(path = tempdir(), pattern = "mp3")
fls
tempdir()
fls <- list.files(path = tempdir())
fls
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
df1 <- query_gbif(term = 'Glaucis dohrnii')[1:2, ]
download_media(metadata = df1, path = tempdir())
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
source("~/Dropbox/R_package_testing/suwo/tests/testthat/test_download_media.R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
source("~/Dropbox/R_package_testing/suwo/R/internal_functions.R")
source("~/Dropbox/R_package_testing/suwo/R/query_gbif.R")
query_gbif("hirundo rustica", "sound")
ob <- query_gbif("oophaga pumilio", "sound")
ob$file_url
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(ob, path = "~/Downloads/delete/")
metadata <- ob
path = "~/Downloads/delete/"
file.name = NULL
pb= TRUE
verbose = TRUE
#stop if metadata is not a data frame
if (!is(metadata, "data.frame")) stop("metadata is not a data frame")
#stop if the basic columns are not found
if (!is.null(file.name))
{if (any(!c(file.name, "file_url") %in% colnames(metadata)))
stop(paste(paste(c(file.name, "file_url")[!c(file.name, "file_url") %in% colnames(metadata)], collapse=", "), "column(s) not found in data frame"))} else
if (!"file_url" %in% colnames(metadata))
stop("file_url column not found in data frame")
if (any(file.name == "file_url")) file.name <- file.name[-which(file.name == "file_url")]
if (!is.null(file.name))  {  if (length(which(tolower(names(metadata)) %in% file.name)) > 1)
fn <- apply(metadata[,which(tolower(names(metadata)) %in% file.name)], 1 , paste , collapse = "-" ) else
fn <- metadata[,which(tolower(names(metadata)) %in% file.name)]
metadata$media.files <- paste(paste(fn, paste0(metadata$repository, metadata$file_url), sep = "-"), ".mp3", sep = "")
} else
metadata$media.files <- paste0(metadata$repository, metadata$file_url, ".mp3")
metadata$media.files
ob$repository
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(ob, path = "~/Downloads/delete/")
metadata$identificationID
metadata$identifier
View(metadata)
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(ob, path = "~/Downloads/delete/")
download_media(ob, path = "~/Downloads/delete/")
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(ob, path = "~/Downloads/delete/")
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(ob, path = "~/Downloads/delete/")
ob$file_url
ob$key
read.csv(°)
ds <- read.csv("./testing/gbif_datasets.csv")
head(ds)
abbreviate(ds$title[1:30])
head(ob)
abbreviate(ob$institutionCode)
abbreviate(ob$`media-publisher`)
abbreviate(ob$institutionCode)
abbreviate(ob$institutionCode)
ob[, c("file_url", "media-type")]
ob[, c("file_url", "media-format")]
strsplit(ob$file_url, "$")
strsplit(ob$file_url, "?")
strsplit(ob$file_url, "\\?")
# Creating string vector
x <- c("GFG", "gfg", "Geeks", "GEEKS")
# Calling grep() function
grep("gfg", x)
grep("Geeks", x)
grep("gfg", x, ignore.case = FALSE)
strsplit(ob$file_url, "\\?")
strsplit(ob$file_url[[1]], "\\?")
q <- strsplit(ob$file_url[[1]], "\\?")
q[1]
q[[1]][1]
gregexpr("\\.", q[[1]][1])
max(gregexpr("\\.", q[[1]][1]))
max(gregexpr("\\.", q[[1]][1])[[1]])
mxq <- max(gregexpr("\\.", q[[1]][1])[[1]])
q <- strsplit(ob$file_url[[1]], "\\?")[[1]][1]
mxq <- max(gregexpr("\\.", q)[[1]])
mxq
q
substr(x = q, start = mxq, stop = nchar(q))
x <- ob$file_url[[1]]
z
x
x2 <- strsplit(x, "\\?")[[1]][1]
max_x2 <- max(gregexpr("\\.", x2)[[1]])
extension <- substr(x = x2, start = max_x2, stop = nchar(x2))
extension
vapply(X = ob$file_url, FUN = function(x){
x2 <- strsplit(x, "\\?")[[1]][1]
max_x2 <- max(gregexpr("\\.", x2)[[1]])
extension <- substr(x = x2, start = max_x2, stop = nchar(x2))
return(extension)
}, FUN.VALUE = character(1))
vapply(X = ob$file_url, FUN = function(x){
x2 <- strsplit(x, "\\?")[[1]][1]
max_x2 <- max(gregexpr("\\.", x2)[[1]])
extension <- substr(x = x2, start = max_x2, stop = nchar(x2))
return(extension)
}, FUN.VALUE = character(1), USE.NAMES = FALSE)
vapply(X = ob$file_url, FUN = function(x){
x2 <- strsplit(x, "\\?")[[1]][1]
max_x2 <- max(gregexpr("\\.", x2)[[1]])
extension <- substr(x = x2, start = max_x2, stop = nchar(x2))
if (extension == ".mpga")
extension <- ".mp3"
return(extension)
}, FUN.VALUE = character(1), USE.NAMES = FALSE)
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
path
download_media(ob, path = "~/Downloads/delete/")
download_media(ob, path = "~/Downloads/delete/")
ob$file_url
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(ob, path = "~/Downloads/delete/")
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(ob, path = "~/Downloads/delete/")
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(ob, path = "~/Downloads/delete/")
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(ob, path = "~/Downloads/delete/")
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(ob, path = "~/Downloads/delete/")
ob$key
download_media(ob[2], path = "~/Downloads/delete/")
ob[2]
ob(,2)
ob[,2]
ob[2,]
download_media(ob[2,], path = "~/Downloads/delete/")
download_media(ob[3,], path = "~/Downloads/delete/")
download_media(ob[4,], path = "~/Downloads/delete/")
download_media(ob[5,], path = "~/Downloads/delete/")
download_media(ob[6,], path = "~/Downloads/delete/")
download_media(ob[7,], path = "~/Downloads/delete/")
download_media(ob[8,], path = "~/Downloads/delete/")
download_media(ob[9,], path = "~/Downloads/delete/")
download_media(ob[10,], path = "~/Downloads/delete/")
download_media(ob[11,], path = "~/Downloads/delete/")
download_media(ob[12,], path = "~/Downloads/delete/")
download_media(ob[13,], path = "~/Downloads/delete/")
download_media(ob[14,], path = "~/Downloads/delete/")
download_media(ob[15,], path = "~/Downloads/delete/")
download_media(ob[16,], path = "~/Downloads/delete/")
count(ob)
ob
ob$file_url
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(ob, path = "~/Downloads/delete/")
ob$identificationID
ob$key
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
ob[8,]
ob[9,]
ob[8:9,]
download_media(ob, path = "~/Downloads/delete/")
ob
metadata <- ob
# Add file extension
metadata$extension  <- vapply(X = metadata$file_url, FUN = function(x){
x2 <- strsplit(x, "\\?")[[1]][1]
max_x2 <- max(gregexpr("\\.", x2)[[1]])
extension <- substr(x = x2, start = max_x2, stop = nchar(x2))
if (extension == ".mpga")
extension <- ".mp3"
return(extension)
}, FUN.VALUE = character(1), USE.NAMES = FALSE)
metadata$file.name <- paste0(metadata$species[x],"-", metadata$key[x],metadata$extension[x])
metadata$file.name
metadata$species
metadata$key
metadata$extension
metadata$file.name <- paste0(gsub(pattern = " ", "_", x = metadata$species), "-", metadata$key, metadata$extension)
metadata$file.name
duplicated(metadata$key)
unique(metadata$key)
# rename if any duplicated names
# new_name <-
unlist(lapply(
unique(metadata$key),
function(x) {
on <- metadata$key[metadata$key == x]
if (length(on) > 1) {
return(paste0(on, "-", seq_len(length(on))))
} else {
return(x)
}
}
))
# rename if any duplicated names
metadata$non_dup_key <- unlist(lapply(
unique(metadata$key),
function(x) {
on <- metadata$key[metadata$key == x]
if (length(on) > 1) {
return(paste0(on, "-", seq_len(length(on))))
} else {
return(x)
}
}
))
metadata$file.name <- paste0(gsub(pattern = " ", "_", x = metadata$species), "-", metadata$non_dup_key, metadata$extension)
metadata$file.name
# create file name
metadata$file.name <- tolower(paste0(gsub(pattern = " ", "_", x = metadata$species), "-", metadata$non_dup_key, metadata$extension))
metadata$file.name
x= 1
x
metadata$repository[x]
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(ob)
getwd()
download_media(ob,path = "~/Downloads/delete/")
ob[10,]
ob[11,]
ml <- query_gbif(term = "Melospiza lincolnii", type = "sound")
unique(ml$institutionCode)
(ml$institutionCode)
bml <- ml[grep("Borror", ml$institutionCode), ]
View(bml)
#     extra = getOption("download.file.extra"))
#     return (NULL)
#   } else if (metadata$repository[x] == "wikiaves"){
#     download.file(
#     url = as.character(metadata$file_url[x]),
#     destfile = file.path(path, metadata$record.id[x]),
#     quiet = TRUE,  mode = "wb", cacheOK = TRUE,
#     extra = getOption("download.file.extra"))
#     return (NULL)
#   } else if (metadata$repository[x] == "GBIF"){
dl_result <- try(download.file(
url = as.character(metadata$file_url[x]),
destfile = file.path(path, metadata$file.name[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra")), silent = TRUE)
dl_result
#     extra = getOption("download.file.extra"))
#     return (NULL)
#   } else if (metadata$repository[x] == "wikiaves"){
#     download.file(
#     url = as.character(metadata$file_url[x]),
#     destfile = file.path(path, metadata$record.id[x]),
#     quiet = TRUE,  mode = "wb", cacheOK = TRUE,
#     extra = getOption("download.file.extra"))
#     return (NULL)
#   } else if (metadata$repository[x] == "GBIF"){
dl_result <- try(download.file(
url = as.character(metadata$fiasdle_url[x]),
destfile = file.path(path, metadata$file.name[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra")), silent = TRUE)
dl_result
is(dl_result, "try-error")
#Function to download file according to repository
downloadFUN <-  function(metadata, x){
# if (!file.exists(metadata$file.name[x])){
#   if (metadata$repository[x] == "XC"){
#     download.file(
#     url = paste("https://xeno-canto.org/", metadata$file_url[x], "/download", sep = ""),
#     destfile = file.path(path, metadata$file.name[x]),
#     quiet = TRUE,  mode = "wb", cacheOK = TRUE,
#     extra = getOption("download.file.extra"))
#     return (NULL)
#   } else if (metadata$repository[x] == "wikiaves"){
#     download.file(
#     url = as.character(metadata$file_url[x]),
#     destfile = file.path(path, metadata$record.id[x]),
#     quiet = TRUE,  mode = "wb", cacheOK = TRUE,
#     extra = getOption("download.file.extra"))
#     return (NULL)
#   } else if (metadata$repository[x] == "GBIF"){
dl_result <- try(download.file(
url = as.character(metadata$file_url[x]),
destfile = file.path(path, metadata$file.name[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra")), silent = TRUE)
if (is(dl_result, "try-error"))
return (FALSE) else
return (TRUE)
}
# set clusters for windows OS
if (pb  & verbose)
write(file = "", x = "Downloading files...")
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
FUN = function(x)
{
downloadFUN(metadata, x)
}
a1
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(metadata), cl = cl, FUN = function(x)
{
downloadFUN(metadata, x)
})
a1
.Options
.Options$suwo$failed_download  <- c(   metadata$file.name[!unlist(a1)])
.Options$suwo$failed_download
FUN = function(x)
{
downloadFUN(metadata, x)
}
FUN = function(x)
{
downloadFUN(metadata, x)
}
success_dwnld <- unlist(pblapply_sw_int(pbar = pb, X = 1:nrow(metadata), cl = cl, FUN = function(x)
{
downloadFUN(metadata, x)
}))
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(ob,path = "~/Downloads/delete/")
.Options$suwo
ob[11,]
