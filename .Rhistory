source("~/Documentos/GitHub/suwo/tests/testthat/test_query_wikiaves.R", echo=TRUE)
source("~/Documentos/GitHub/suwo/R/query_wikiaves.R", echo=TRUE)
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "sound")[1:2, ]
download_media(metadata = df1, path = tempdir())
#run document twice
devtools::document(".")
rm(list = c("download_media", "query_wikiaves", "query_xenocanto"))
#run document twice
devtools::document(".")
#check with devtools
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE, )
df1 <- query_gbif(term = 'Glaucis dohrnii', type =  "sound")
df1
#install.packages("httr")
#install.packages("readr")
library(httr)
library(readr)
update_dataset_object <- function(gbif_datasets) {
# Download the CSV file
response <- GET(url)
# Check if the download was successful
if (http_type(response) == "text/csv") {
# Read the CSV data
csv_data <- read_csv(text = content(response, "text"))
# Update the dataset object with the new data
gbif_datasets <- csv_data
# Return the updated object
return(gbif_datasets)
} else {
stop("Failed to download CSV.")
}
}
update_dataset_object <- function(gbif_datasets) {
# Download the CSV file
response <- GET("https://api.gbif.org/v1/dataset/search/export?format=CSV&")
# Check if the download was successful
if (http_type(response) == "text/csv") {
# Read the CSV data
csv_data <- read_csv(text = content(response, "text"))
# Update the dataset object with the new data
gbif_datasets <- csv_data
# Return the updated object
return(gbif_datasets)
} else {
stop("Failed to download CSV.")
}
}
source("~/Documentos/GitHub/suwo/tests/testthat/gbif_dataset_update.R", echo=TRUE)
update_gbif_datasets()
# Download the CSV file
response <- GET("https://api.gbif.org/v1/dataset/search/export?format=CSV&")
#run document twice
devtools::document(".")
#check with devtools
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE, )
#run document twice
devtools::document(".")
#check with devtools
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE, )
df1 <- query_xenocanto(term = 'Phaethornis anthophilus')[1:2, ]
df1
download_media(metadata = df1, path = tempdir())
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "sound")[1:2, ]
download_media(metadata = df1, path = tempdir())
df1 <- query_gbif(term = 'Glaucis dohrnii', type = "sound")[1:2, ]
download_media(metadata = df1, path = tempdir())
df1 <- query_xenocanto(term = 'Phaethornis anthophilus')[1:2, ]
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "sound")[1:2, ]
metadata <- df1
# check arguments
arguments <- as.list(base::match.call())[-1]
# Add file extension
metadata$extension  <- vapply(X = metadata$file_url, FUN = function(x){
x2 <- strsplit(x, "\\?")[[1]][1]
max_x2 <- max(gregexpr("\\.", x2)[[1]])
extension <- substr(x = x2, start = max_x2, stop = nchar(x2))
if (extension == ".mpga")
extension <- ".mp3"
return(extension)
}, FUN.VALUE = character(1), USE.NAMES = FALSE)
metadata
#Abbreviate repository name
repo <- metadata$repository[1]
metadata$repository <- switch(repo,
XC = "XC",
Observation = "OBS",
GBIF = "GBIF",
wikiaves = "WA",
INAT = "INAT",
Macaulay = "ML")
metadata
# rename if any duplicated names
metadata$non_dup_key <- unlist(lapply(
unique(metadata$key),
function(x) {
on <- metadata$key[metadata$key == x]
if (length(on) > 1) {
return(paste0(on, "-", seq_len(length(on))))
} else {
return(x)
}
}
))
metadata
# create file name
metadata$file.name <- paste0(gsub(pattern = " ", "_", x = metadata$species), "-", metadata$repository, metadata$non_dup_key, metadata$extension)
metadata
#run document twice
devtools::document(".")
#check with devtools
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE, )
download_media(metadata = df1, path = tempdir())
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "sound")[1:2, ]
download_media(metadata = df1, path = tempdir())
#run document twice
devtools::document(".")
#run document twice
devtools::document(".")
rm(list = c("update_gbif_datasets"))
#run document twice
devtools::document(".")
query_gbif(term = "glaucis dohrnii", type = "sound")
# check internet connection
a <- try(RCurl::getURL("https://api.gbif.org/v1/occurrence/search?"), silent = TRUE)
if (is(a, "try-error")) {
stop2("No connection to GBIF API (check your internet connection!)")
}
if (a == "Could not connect to the database") {
stop2("GBIF website is apparently down")
}
a <- try(RCurl::getURL("https://api.gbif.org/v1/"), silent = TRUE)
a
# devtools::install()
pkgs <- c("remotes", "RCurl", "jsonlite", "crayon", "devtools", "leaflet", "maps", "pkgcheck", "pkgstats", "testthat", "styler")
# install/ load packages
out <- lapply(pkgs, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
rm(list = ls())
# install ctags
# first run in terminal: sudo apt install lsb-core
# then run this with sudo privilege
# ctags_install(bin_dir = NULL, sudo = TRUE)
# load_all()
test_that("search Aristolochia baetica photos in parallel", {
cores <- parallel::detectCores()
cores <- if(cores > 2) 2
cores <- if(!is.numeric(cores)) 1
df1 <- query_gbif(term = 'Aristolochia baetica', type =  "still image", cores = cores)
expect_true(nrow(df1) >= 2003)
})
#run document twice
devtools::document(".")
test_that("search Aristolochia baetica photos in parallel", {
cores <- parallel::detectCores()
cores <- if(cores > 2) 2
cores <- if(!is.numeric(cores)) 1
df1 <- query_gbif(term = 'Aristolochia baetica', type =  "still image", cores = cores)
expect_true(nrow(df1) >= 2003)
})
#run document twice
devtools::document(".")
# check internet connection
a <- try(RCurl::getURL("https://api.gbif.org"), silent = TRUE)
# check internet connection
a <- try(RCurl::getURL("https://api.gbif.org"), silent = TRUE)
if (is(a, "try-error")) {
stop2("No connection to GBIF API (check your internet connection!)")
}
a
library(testthat)
test_that("search Glaucis dohrnii audio", {
df1 <- query_gbif(term = 'Glaucis dohrnii', type =  "sound")
expect_true(nrow(df1) >= 22)
})
#run document twice
devtools::document(".")
df1 <- query_xenocanto(term = 'Phaethornis anthophilus', all_data = FALSE)
query_col_names <- colnames(df1)
query_col_names
expected_col_names <- c("key", "species", "date", "country", "location", "latitude", "longitude", "file_url", "repository")
expect_true(identical(query_col_names, expected_col_names), info = "Column names do not match the expected names")
test_that("test all_data FALSE", {
df1 <- query_xenocanto(term = 'Phaethornis anthophilus', all_data = FALSE)
expected_col_names <- c("key", "species", "date", "country", "location", "latitude", "longitude", "file_url", "repository")
query_col_names <- colnames(df1)
expect_true(identical(query_col_names, expected_col_names), info = "Column names do not match the expected names")
})
library(testthat)
test_that("test all_data FALSE", {
df1 <- query_xenocanto(term = 'Phaethornis anthophilus', all_data = FALSE)
expected_col_names <- c("key", "species", "date", "country", "location", "latitude", "longitude", "file_url", "repository")
query_col_names <- colnames(df1)
expect_true(identical(query_col_names, expected_col_names), info = "Column names do not match the expected names")
})
test_that("test all_data FALSE", {
df1 <- query_xenocanto(term = 'Phaethornis anthophilus', all_data = FALSE)
expected_col_names <- c("key", "species", "date", "country", "location", "latitude", "longitude", "file_url", "repository")
query_col_names <- colnames(df1)
expect_true(all(expected_col_names %in% query_col_names) && all(query_col_names %in% expected_col_names), info = "Column names do not match the expected names")
})
fls <- list.files(path = tempdir(), ignore.case = TRUE, full.names = TRUE)
fls
# remove files
unlink(tempdir(), recursive = TRUE, force = TRUE)
fls <- list.files(path = tempdir(), ignore.case = TRUE, full.names = TRUE)
fls
test_that("search inaturalist sp download", {
df1 <- query_inaturalist(term = 'Agalychnis lemur', type = "still image")
test_keys <- c("149945235", "170947000")
df1 <- subset(df1, key %in% test_keys)
# remove files
unlink(tempdir(), recursive = TRUE, force = TRUE)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), ignore.case = TRUE, full.names = TRUE)
expect_equal(fls, c("Agalychnis_lemur-INAT149945235",
"Agalychnis_lemur-INAT170947000"))
})
test_that("search inaturalist sp download", {
df1 <- query_inaturalist(term = 'Agalychnis lemur', type = "still image")
test_keys <- c("149945235", "170947000")
df1 <- subset(df1, key %in% test_keys)
# remove files
unlink(tempdir(), force = TRUE)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), ignore.case = TRUE, full.names = TRUE)
expect_equal(fls, c("Agalychnis_lemur-INAT149945235",
"Agalychnis_lemur-INAT170947000"))
})
test_that("search inaturalist sp download", {
df1 <- query_inaturalist(term = 'Agalychnis lemur', type = "still image")
test_keys <- c("149945235", "170947000")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), ignore.case = TRUE, full.names = TRUE)
# remove files
unlink(tempdir(), recursive = TRUE, force = TRUE)
expect_equal(fls, c("Agalychnis_lemur-INAT149945235",
"Agalychnis_lemur-INAT170947000"))
})
tempdir()
warbleR::open_wd(path = tempdir())
tempdir()
warbleR::open_wd(path = tempdir())
test_that("search inaturalist sp download", {
df1 <- query_inaturalist(term = 'Agalychnis lemur', type = "still image")
test_keys <- c("149945235", "170947000")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "\\.jpeg$", ignore.case = TRUE, full.names = TRUE)
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Agalychnis_lemur-INAT149945235",
"Agalychnis_lemur-INAT170947000"))
})
library(testthat)
#run document twice
devtools::document(".")
test_that("search inaturalist sp download", {
df1 <- query_inaturalist(term = 'Agalychnis lemur', type = "still image")
test_keys <- c("149945235", "170947000")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "\\.jpeg$", ignore.case = TRUE, full.names = TRUE)
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Agalychnis_lemur-INAT149945235",
"Agalychnis_lemur-INAT170947000"))
})
warbleR::open_wd(path = tempdir())
#run document twice
devtools::document(".")
#run document twice
devtools::document(".")
test_that("search inaturalist sp download", {
df1 <- query_inaturalist(term = 'Agalychnis lemur', type = "still image")
test_keys <- c("149945235", "170947000")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "\\.jpeg$", ignore.case = TRUE, full.names = TRUE)
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Agalychnis_lemur-INAT149945235",
"Agalychnis_lemur-INAT170947000"))
})
warbleR::open_wd(path = tempdir())
warbleR::open_wd(path = tempdir())
test_that("search inaturalist sp download", {
df1 <- query_inaturalist(term = 'Agalychnis lemur', type = "still image")
test_keys <- c("149945235", "170947000")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "\\.jpeg$", ignore.case = TRUE, full.names = TRUE)
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Agalychnis_lemur-INAT149945235",
"Agalychnis_lemur-INAT170947000"))
})
#run document twice
devtools::document(".")
test_that("search inaturalist sp download", {
df1 <- query_inaturalist(term = 'Agalychnis lemur', type = "still image")
test_keys <- c("149945235", "170947000")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "\\.jpeg$", ignore.case = TRUE, full.names = TRUE)
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Agalychnis_lemur-INAT149945235",
"Agalychnis_lemur-INAT170947000"))
})
test_that("search inaturalist sp download", {
df1 <- query_inaturalist(term = 'Agalychnis lemur', type = "still image")
test_keys <- c("149945235", "170947000")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = ".jpeg$", ignore.case = TRUE, full.names = TRUE)
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Agalychnis_lemur-INAT149945235",
"Agalychnis_lemur-INAT170947000"))
})
test_that("search inaturalist sp download", {
df1 <- query_inaturalist(term = 'Agalychnis lemur', type = "still image")
test_keys <- c("149945235", "170947000")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = ".jpeg$", ignore.case = TRUE)
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Agalychnis_lemur-INAT149945235",
"Agalychnis_lemur-INAT170947000"))
})
test_that("search inaturalist sp download", {
df1 <- query_inaturalist(term = 'Agalychnis lemur', type = "still image")
test_keys <- c("149945235", "170947000")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = ".jpeg$", ignore.case = TRUE)
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Agalychnis_lemur-INAT149945235.jpeg",
"Agalychnis_lemur-INAT170947000.jpeg"))
})
warbleR::open_wd(path = tempdir())
metadata <- query_inaturalist(term = "Agalychnis lemur", type = "still image")
if (metadata$repository[1] == "INAT"){
if (!exists("media_extension", where = metadata)) {
metadata$extension <- vapply(X = metadata$file_url, FUN = function(x) {
x2 <- strsplit(x, "\\?")[[1]][1]
max_x2 <- max(gregexpr("\\.", x2)[[1]])
extension <- ".jpeg"
return(extension)
}, FUN.VALUE = character(1), USE.NAMES = FALSE)
}
}
metadata$extension
# rename if any duplicated names
metadata$non_dup_key <- unlist(lapply(
unique(metadata$key),
function(x) {
on <- metadata$key[metadata$key == x]
if (length(on) > 1) {
return(paste0(on, "-", seq_len(length(on))))
} else {
return(x)
}
}
))
metadata$non_dup_key
# create file name
metadata$file.name <- paste0(gsub(pattern = " ", "_", x = metadata$species), "-", metadata$repository, metadata$non_dup_key, metadata$extension)
metadata$file.name
# Function to download file according to repository
downloadFUN <- function(metadata, x) {
dl_result <- try(download.file(
url = as.character(metadata$file_url[x]),
destfile = file.path(path, metadata$file.name[x]),
quiet = TRUE, mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra")
), silent = TRUE)
if (is(dl_result, "try-error")) {
return(FALSE)
} else {
return(TRUE)
}
}
path = tempdir()
# Function to download file according to repository
downloadFUN <- function(metadata, x) {
dl_result <- try(download.file(
url = as.character(metadata$file_url[x]),
destfile = file.path(path, metadata$file.name[x]),
quiet = TRUE, mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra")
), silent = TRUE)
if (is(dl_result, "try-error")) {
return(FALSE)
} else {
return(TRUE)
}
}
warbleR::open_wd(path = tempdir())
dl_result <- try(download.file(
url = as.character(metadata$file_url[x]),
destfile = file.path(path, metadata$file.name[x]),
quiet = TRUE, mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra")
), silent = TRUE)
dl_result <- try(download.file(
url = as.character(metadata$file_url[x]),
destfile = file.path(path, metadata$file.name[x]),
quiet = TRUE, mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra")
), silent = TRUE)
#run document twice
devtools::document(".")
download_media(metadata)
download_media(metadata, path= tempdir())
test_that("Xenocanto Phaethornis anthophilus download", {
df1 <- query_xenocanto(term = 'Phaethornis anthophilus')
test_keys <- c("532163", "568491")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Phaethornis_anthophilus-XC532163.mp3", "Phaethornis_anthophilus-XC568491.mp3"))
})
df1 <- query_xenocanto(term = 'Phaethornis anthophilus')
test_keys <- c("532163", "568491")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
test_that("wikiaves Glaucis dohrnii sp download", {
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "sound")
test_keys <- c("2286824", "4522545")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Glaucis_dohrnii-WA2286824.mp3",
"Glaucis_dohrnii-WA4522545.mp3"))
})
test_that("search GBIF sp download", {
df1 <- query_gbif(term = 'Glaucis dohrnii', type = "sound")
test_keys <- c("3863342525", "3863345521")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Glaucis_dohrnii-GBIF3863342525.mp3",
"Glaucis_dohrnii-GBIF3863345521.mp3"))
})
test_that("search inaturalist sp download", {
df1 <- query_inaturalist(term = 'Agalychnis lemur', type = "still image")
test_keys <- c("149945235", "170947000")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = ".jpeg$", ignore.case = TRUE)
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Agalychnis_lemur-INAT149945235.jpeg",
"Agalychnis_lemur-INAT170947000.jpeg"))
})
#run document twice
devtools::document(".")
test_that("search GBIF sp download", {
df1 <- query_gbif(term = 'Glaucis dohrnii', type = "sound")
test_keys <- c("3863342525", "3863345521")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Glaucis_dohrnii-GBIF3863342525.mp3",
"Glaucis_dohrnii-GBIF3863345521.mp3"))
})
library(testthat)
test_that("search GBIF sp download", {
df1 <- query_gbif(term = 'Glaucis dohrnii', type = "sound")
test_keys <- c("3863342525", "3863345521")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Glaucis_dohrnii-GBIF3863342525.mp3",
"Glaucis_dohrnii-GBIF3863345521.mp3"))
})
test_that("wikiaves Glaucis dohrnii sp download", {
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type = "sound")
test_keys <- c("2286824", "4522545")
df1 <- subset(df1, key %in% test_keys)
download_media(metadata = df1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "mp3$")
# remove files
unlink(file.path(tempdir(), fls))
expect_equal(fls, c("Glaucis_dohrnii-WA2286824.mp3",
"Glaucis_dohrnii-WA4522545.mp3"))
})
