#
# wav2flac(file.path(tempdir(), "Phae.long5.wav"))
#
# if (selection.table){
#
#   lbh_selec_table$sound.files <- as.character(lbh_selec_table$sound.files)
#
#   sub_tab <- lbh_selec_table[lbh_selec_table$sound.files %in% c("Phae.long1.wav", "Phae.long4.wav"), 1:7]
#
#   sub_tab$sound.files[sub_tab$sound.files == "Phae.long1.wav"] <- "Phae.long5.flac"
#
#     sub_tab$sound.files[sub_tab$sound.files == "Phae.long4.wav"] <- "Phae.long4.mp3"
#
#     # fix times
#      sub_tab$start[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.2085945, 1.5950019, 2.3057996)
#
#      sub_tab$end[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.3528653, 1.7287163, 2.4289576)
#
#
#     sub_tab <- rbind(sub_tab, data.frame(sound.files = "recording_20170716_230503.wac", channel = 1, selec = 1, start = 0.1, end = 0.3, bottom.freq = 2, top.freq = 10))
#
#     sub_tab <- rbind(sub_tab, lbh_selec_table[, 1:7])
#
#     sub_tab$format <-ifelse(grepl("flac$", sub_tab$sound.files), "flac", ifelse(grepl("mp3$", sub_tab$sound.files), "mp3", "wav"))
#
#
#     return(sub_tab)
# } else return(NULL)
# }
}
# run all warbleR fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
# run.all()
list.selection.table <- function(lbh_selec_table, path = tempdir())
{
crr.dr <- getwd()
on.exit(setwd(crr.dr))
if(!is.null(path)) setwd(path)
Xlist <- list()
Xlist$Xdf <- lbh_selec_table
Xlist$Xst <- selection_table(lbh_selec_table)
Xlist$Xest <- selection_table(lbh_selec_table, extended = T, confirm.extended = F)
lbh_selec_table$song <- as.numeric(lbh_selec_table$sound.files)
Xlist$Xestbs <- selection_table(X = lbh_selec_table, extended = T, by.song = "song", confirm.extended = F)
names(Xlist) <- c("DATA.FRAME", "SELECTION_TABLE", "EXTENDED_SELECTION_TABLE", "by.song.EXTENDED_SELECTION_TABLE")
return(Xlist)
}
bi_mats <- function(X, labels) {
# create empty matrix to store memebership matrix
mat <- matrix(nrow = ncol(X), ncol = ncol(X))
# add labels to row and col names
rownames(mat) <- colnames(mat) <- labels
# add 0 if same lek and 1 if else
out <- lapply(1:(length(labels) - 1), function(i){
sapply((i + 1):length(labels), function(j)
if (labels[i] == labels[j]) 0 else 1)
})
# add to mat
mat[lower.tri(mat)] <- unlist(out)
# retunr as distance matrix
return(as.dist(mat))
}
plot_detection <- function(reference, detection, lwd = 90, sep = 1, labels = detection$selec){
if (!is.null(detection$detection.class)){
labels <- ifelse(detection$detection.class == "true.positive", "\nTP", ifelse(detection$detection.class == "false.positive", "\nFP", ifelse(detection$detection.class == "false.negative", "\nFN", ifelse(detection$detection.class == "true.positive (split)", "\nTPs", ifelse(detection$detection.class == "true.positive (merged)", "\nTPm", ifelse(detection$detection.class == "negative (split)", "\nNs", ifelse(detection$detection.class == "negative (merged)", "\nNm", ifelse(detection$detection.class == "negative (split/merged)", "\nNsm", "\nTPsm"))))))))
detection$labels <- paste0(detection$selec, labels)
} else detection$labels <- detection$selec
old_par <- par()
old_par <- old_par[!names(old_par) %in%  c("cin", "cra", "csi", "cxy", "din", "page")]
on.exit(par(old_par))
par(mar = rep(0, 4))
n_sound.files <- length(unique(c(reference$sound.files, detection$sound.files)))
if (n_sound.files > 1)
par(mfrow = c(n_sound.files, 1))
for (e in unique(c(detection$sound.files, reference$sound.files))){
sub_detec <- detection[detection$sound.files == e, ]
sub_ref <- reference[reference$sound.files == e, ]
plot(x = range(c(sub_detec$start, sub_detec$end, sub_ref$start, sub_ref$end)), y = c(-1, 1), col = "white", pch = 21, yaxt = "n", ylab = "", xaxt = "n", xlab = "")
# plot references first
if (nrow(sub_ref) > 0)
for (i in 1:nrow(sub_ref)){
segments(
x0 = sub_ref$start[i],
x1 = sub_ref$end[i],
y0 = sep / -2,
y1 = sep / -2,
lwd = lwd,
col = viridis::magma(10, alpha = 0.4)[3],
lend = 1
)
text(x = (sub_ref$end[i] + sub_ref$start[i]) / 2, y = sep / -2, labels = i, col = "white")
}
# add detections
if (nrow(sub_detec) > 0)
for (i in 1:nrow(sub_detec)){
segments(
x0 = sub_detec$start[i],
x1 = sub_detec$end[i],
y0 = sep / 2,
y1 = sep / 2,
lwd = lwd,
col = viridis::magma(10, alpha = 0.4)[7],
lend = 1
)
text(x = (sub_detec$end[i] + sub_detec$start[i]) / 2, y = sep / 2, labels = sub_detec$labels[i])
}
}
}
### simulate annotation tables
# cannot have duration shorter than 2
sim_annotation <- function(n = 10, n.sound.files = 1){
sims_l <- lapply(1:n.sound.files, function(x){
possible_start <- seq(0, 98, 2)
sim_ref <- data.frame(sound.files = paste0(x, ".wav"), selec = 1:(n + 1), start = sort(c(sample(possible_start, n), 100)))
sim_ref$end <- NA
for(i in 1:(n))
sim_ref$end[i] <- sim_ref$start[i] + round(runif(n = 1, min = 1, max = sim_ref$start[i + 1] - sim_ref$start[i] - 0.5))
sim_ref <- sim_ref[-nrow(sim_ref), ]
return(sim_ref)
})
sims <- do.call(rbind, sims_l)
return(sims)
}
FUN <- "query_inaturalist"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
source("./R/internal_functions.R")
load("~/Dropbox/R_package_testing/suwo/R/sysdata.rda")
source("./R/taxon_code_search.R")
setwd(tempdir())
df1 <- query_inaturalist(term = 'Glaucis dohrnii')
df1
df1 <- query_inaturalist(term = 'Turdus grayi')
df1 <- query_inaturalist(term = 'Serinus serinus')
df1
names(df1)
df1$location
names(df1)
df1$place_guess
df1$latitude
devtools::load_all()
# devtools::install()
remotes::install_github("ropensci-review-tools/pkgcheck")
pkgs <- c("remotes", "RCurl", "jsonlite", "crayon", "devtools", "leaflet", "maps", "pkgcheck", "pkgstats", "testthat", "styler", "cli")
# install/ load packages
out <- lapply(pkgs, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
rm(list = ls())
# install ctags
# first run in terminal: sudo apt install lsb-core
# then run this with sudo privilege
# ctags_install(bin_dir = NULL, sudo = TRUE)
# load_all()
install()
pkgcheck::pkgcheck(".")
pkgcheck::pkgcheck(".")
pkgcheck::pkgcheck()
pkgstats::pkgstats(".")
cyclocomp::cyclocomp_package_dir(".")
pkgcheck::pkgcheck(".")
pkgcheck::pkgcheck(".", goodpractice = F)
cyclocomp::cyclocomp_package_dir(".")
# initialize search
q <-
jsonlite::fromJSON(paste0(
"https://xeno-canto.org/api/3/recordings?query=larus fuscus&key=74514db996296de720964827e4d727bbeefbaaa3",
term
))
# initialize search
q <-
jsonlite::fromJSON(paste0(
"https://xeno-canto.org/api/3/recordings?query=larus fuscus&key=74514db996296de720964827e4d727bbeefbaaa3"
))
# initialize search
q <-
jsonlite::fromJSON(paste0(
"https://xeno-canto.org/api/3/recordings?query=larus%fuscus&key=74514db996296de720964827e4d727bbeefbaaa3"
))
# initialize search
q <-
jsonlite::fromJSON(paste0(
"https://xeno-canto.org/api/3/recordings?query=sp:%22larus%20fuscus%22&key=74514db996296de720964827e4d727bbeefbaaa3"
))
#run document twice
devtools::document(".")
#run document twice
devtools::document(".")
library(devtools)
library("devtools")
install.packages(devtools)
install.packages("devtools")
#run document twice
devtools::document(".")
i <- query_inaturalist("Phaethornis guy",type = "still image")
View(i)
any(duplicated(i))
snake <- query_inaturalist(term = "Thamnophis sirtalis", type = "still image", all_data = TRUE )
any(duplicated(snake))
saveRDS(snake, "data_snake.rds")
View(snake)
#run document twice
devtools::document(".")
query_xenocanto(term = "Phaethornis anthophilus")
x <- query_xenocanto(term = "Phaethornis anthophilus")
#run document twice
devtools::document(".")
taxon_code_search("turdus grayi")
taxon_code_df
vtools
#run document twice
devtools::document(".")
taxon_code_search("Turdus grayi")
as <- query_gbif("Phaethornis guy")
as
ask <- query_gbif("Turdus grayi")
#run document twice
devtools::document(".")
ask <- query_gbif("Turdus grayi")
#run document twice
devtools::document(".")
#run document twice
devtools::document(".")
ask <- query_gbif("Phaethornis guy", type = "sound")
ask <- query_gbif("Turdus grayi", type = "still image")
View(ask)
View(ask)
duplicated_rows <- duplicated(ask$key)
sum(duplicated_rows)
View(duplicated_rows)
duplicated_rows
#run document twice
devtools::document(".")
ask <- query_gbif("Turdus grayi", type = "still image")
duplicated_rows <- duplicated(ask$key)
sum(duplicated_rows)
View(ask)
duplicated_rows <- duplicated(ask$file_url)
sum(duplicated_rows)
#run document twice
devtools::document(".")
ask <- query_gbif("Phaethornis guy", type = "still image")
duplicated_rows <- duplicated(ask$file_url)
sum(duplicated_rows)
duplicated_rows
View(duplicated_rows)
duplicated_rows
#run document twice
devtools::document(".")
ask2 <- query_gbif("phaethornis guy", type = "still image")
duplicated_rows <- duplicated(ask2$file_url)
sum(duplicated_rows)
update_query(ask2)
update_query(ask)
query_term <- attr(ask, "query_term")
query_term
query_type <- attr(previous_query, "query_type")
query_type <- attr(ask, "query_type")
query_type
#run document twice
devtools::document(".")
update_query(ask)
ask3 <- query_inaturalist("Phaethornis guy", type = "still image")
View(ask3)
duplicated_rows <- duplicated(ask3$file_url)
sum(duplicated_rows)
duplicated_rows
ask4 <- query_macaulay("phaethornis guy", type = "photo")
source("E:/Users/Jorge/Documents/GitHub/suwo/R/query_macaulay.R")
#run document twice
devtools::document(".")
rm(list = c("query_macaulay"))
#run document twice
devtools::document(".")
ask4 <- query_macaulay("phaethornis guy", type = "photo")
ask5 <- query_wikiaves("Phaethornis guy", type = "still image")
ask5 <- query_wikiaves("Phaethornis pretrei", type = "still image")
duplicated_rows <- duplicated(ask4$file_url)
duplicated_rows <- duplicated(ask5$file_url)
sum(duplicated_rows)
ask6 <- query_xenocanto("phaethornis guy")
duplicated_rows <- duplicated(ask6$file_url)
sum(duplicated_rows)
update_query(ask3)
update_query(ask4)
update_query(ask5)
update_query(ask6)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# From CRAN would be
install.packages("suwo",repos = "http://cran.us.r-project.org")
# install package
#remotes::install_github("maRce10/suwo")
#load packages
#library(suwo)
Calo <- query_inaturalist(term = "Calochortus plummerae", type = "still image", all_data = FALSE )
#run document twice
devtools::document(".")
#run document twice
devtools::document(".")
Calo <- query_inaturalist(term = "Calochortus plummerae", type = "still image", all_data = FALSE )
Calo2 <- Calo
Calo <- subset(Calo2, select = c("species","latitude","longitude"))
colnames(Calo)[1]<-'species'
Calo$species <- as.factor(Calo$species)
# saveRDS(Calo, "~/Downloads/calo_data.RDS")
# Calo <- readRDS("~/Downloads/calo_data.RDS")
Calo_map <- leaflet::leaflet(Calo)
install.packages(@leaflet@)
install.packages("leaflet")
Calo_map <- leaflet::leaflet(Calo)
htmlwidgets::saveWidget(widget = Calo_map,
file = "Calo_map.html",
selfcontained = TRUE)
Calo <- query_inaturalist(term = "Calochortus plummerae", type = "still image", all_data = FALSE )
View(Calo_map)
Calo2 <- Calo
Calo <- subset(Calo2, select = c("species","latitude","longitude"))
colnames(Calo)[1]<-'species'
Calo$species <- as.factor(Calo$species)
# saveRDS(Calo, "~/Downloads/calo_data.RDS")
# Calo <- readRDS("~/Downloads/calo_data.RDS")
Calo_map <- leaflet::leaflet(Calo)
htmlwidgets::saveWidget(widget = Calo_map,
file = "Calo_map.html",
selfcontained = TRUE)
metadata <- query_xenocanto(term = "Phaethornis anthophilus")
# create map
map_locations(metadata)
taxon_code_turdus <- taxon_code_search(species_name = 'Turdus iliacus', taxon_code_df = clements_data)
taxon_code_turdus <- taxon_code_search(species_name = 'Turdus iliacus')
taxon_code_turdus <- taxon_code_search(species_name = "Turdus iliacus")
taxon_code_turdus <- taxon_code_search(term = "Turdus iliacus")
taxon_code_turdus
taxon_code_turdus <- taxon_code_search(term = "Turdus iliacus")
taxon_code_turdus
check_gbif_datasets()
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE)
query_result_GBIF <- query_gbif(term = 'Agalychnis calidryas', type = "sound")
query_result_GBIF <- query_gbif(term = 'Agalychnis', type = "sound")
View(query_result_GBIF)
#Queries from Macaulay require user confirmation after download of the csv file that contains the information from the search in the Macaulay library.
query_result_Macaulay <- query_macaulay(term = 'Turdus iliacus', type = "Sound")
#Queries from Macaulay require user confirmation after download of the csv file that contains the information from the search in the Macaulay library.
query_result_Macaulay <- query_macaulay(term = 'Turdus iliacus', type = "audio")
#load package
library(suwo)
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE)
df1 <- query_inaturalist(term = 'asdasdasd', type =  "still image")
df1 <- query_inaturalist(term = 'asdasdasd', type =  "still image")
df1 <- query_inaturalist(term = 'asdasdasd', type =  "still image")
is.null(df1)
View(df1)
expect_true(is.empty(df1))
#run document twice
devtools::document(".")
expect_true(is.empty(df1))
expect_true((df1))
expect_true(nrow(df1) >=  10)
test_that("no result", {
df1 <- query_inaturalist(term = 'asdasdasd', type =  "still image")
expect_true((df1))
})
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE)
df1 <- query_wikiaves(term = 'Spatula discors', type = "sound")
View(df1)
df1 <- query_wikiaves(term = 'Ilicura militaris', type = "sound")
df1 <- query_wikiaves(term = 'Alagoas Tyrannulet', type = "sound")
expect_true(is.null(df1))
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE)
install.packages("suwo")
# Load your package directly from source
devtools::load_all("E:/Users/Jorge/Documents/GitHub/suwo")
library(suwo)
library(suwo)
devtools::install_github("maRce10/suwo")
devtools::install_github("maRce10/suwo")
# Get occurrence data from GBIF
quetzal_gbif <- query_gbif(term = "Pharomachrus mocinno", type = "all")
#load packages
library(suwo)
# Get occurrence data from GBIF
quetzal_gbif <- query_gbif(term = "Pharomachrus mocinno", type = "all")
# Get occurrence data from GBIF
quetzal_gbif <- query_gbif(term = "Pharomachrus mocinno", type = "still image")
# Get observations from iNaturalist
quetzal_inat <- query_inaturalist(term = "Pharomachrus mocinno", type = "still image")
# Get audio recordings from xeno-canto
quetzal_xc <- query_xenocanto(term = "Pharomachrus mocinno")
quetzal_gbif
quetzal_inat
quetzal_xc
#Remove one row from previous query
quetzal_xc <- quetzal_xc[-1, ]
updated_query_result_xenocanto  <- update_query(previous_query = quetzal_xc)
quetzal_xc
View(quetzal_xc)
#Remove one row from previous query
quetzal_xc <- quetzal_xc[-1, ]
View(quetzal_xc)
#Remove one row from previous query
quetzal_xc <- quetzal_xc[-1, ]
updated_query_result_xenocanto  <- update_query(previous_query = quetzal_xc)
View(quetzal_xc)
# Get audio recordings from xeno-canto
quetzal_xc <- query_xenocanto(term = "Pharomachrus mocinno")
#Remove one row from previous query
quetzal_xc <- quetzal_xc[-1, ]
#Remove one row from previous query
quetzal_xc <- quetzal_xc[-1, ]
updated_query_result_xenocanto  <- update_query(previous_query = quetzal_xc)
updated_query_result_xenocanto_2  <- update_query(previous_query = quetzal_xc)
# Chunk 1: setup
library(knitr)
library(htmlwidgets)
library(suwo)
# create custom printing method
.print_df <- function(x, highlight = NULL, ...) {
kbl <- kableExtra::kable(
head(as.data.frame(x)),
align = "c",
row.names = F,
format = "html",
escape = F
)
if (!is.null(highlight))
kbl <- column_spec(kbl, column = which(names(x) %in% highlight), background = "#ccebff", bold = TRUE)
kbl <-
kableExtra::kable_styling(kbl, bootstrap_options = "striped", font_size = 14)
kbl <-
kableExtra::scroll_box(kbl, width = "100%", height = "300px")
asis_output(kbl)
}
# register data frame printing method
registerS3method("knit_print", "data.frame", .print_df)
# global option chunks
knitr::opts_chunk$set(
fig.width = 5,
fig.height = 3.5,
dpi = 70,
comment = "",
out.width = "80%",
fig.align = "center",
message = TRUE,
warning = TRUE
)
options(width = 100, max.print = 100)
# Chunk 3
# Build a data frame summarizing the query_* functions
query_summary <- data.frame(
function_name = c("query_gbif", "query_inaturalist", "query_macaulay",
"query_observation", "query_wikiaves", "query_xenocanto"),
requires_token = c("No", "No", "No", "Yes", "No", "No"),
file_types = c("sound, still image, moving image, interactive resource",
"sound, still image",
"audio, photo, video",
"sound, still image",
"sound, still image",
"sound"),
taxonomic_range = c("species", "species", "species, subspecies",
"species", "species", "species, genus, family"),
max_results = c("not specified", "not specified", "not specified",
"not specified", "not specified", "not specified"),
geographic_coverage = c("worldwide", "worldwide", "worldwide",
"worldwide", "Americas", "worldwide"),
additional_data = c(
"coordinates, date, country, taxonomic keys, multimedia metadata, locality, license, etc.",
"time observed, geoprivacy, species_guess, votes, location, date, file URL, repository, etc.",
"scientific name, group, status, rarity, info text, permalink, file URL, repository",
"scientific name, group, status, rarity, info text, permalink, file URL, repository",
"species info, user, date, location, comments, likes, URL, repository",
"genus, species, subspecies, location, coordinates, recordist, file URL, license, date, etc."
),
stringsAsFactors = FALSE
)
# Print the table
print(query_summary, row.names = FALSE)
# Chunk 5
# Get occurrence data from GBIF
quetzal_gbif <- query_gbif(term = "Pharomachrus mocinno", type = "still image")
# create map
map_locations(quetzal_gbif)
# Get observations from iNaturalist
quetzal_inat <- query_inaturalist(term = "Ectophylla alba", type = "still image")
# create map
map_locations(quetzal_inat)
# Get audio recordings from xeno-canto
quetzal_xc <- query_xenocanto(term = "Ectophylla alba")
View(quetzal_xc)
download_media(quetzal_xc)
getwd()
Merged_Dataframe <- detect_duplicates(X = quetzal_gbif, Y = quetzal_inat)
taxon_code_pharomachrus <- taxon_code_search(term = "Pharomachrus mocinno")
taxon_code_pharomachrus
RStudio.Version()
