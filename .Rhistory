Function <- sapply(Function, as.character)
file_types <- sapply(Function, function(x)
paste(formals(x)$format, collapse = ", "))
file_types <- gsub("c, ", "", file_types)
file_types[Function == "query_xenocanto"] <- "sound"
urls = c(
gbif = "https://www.gbif.org/",
inaturalist = "https://www.inaturalist.org/",
`macaulay library` =  "https://www.macaulaylibrary.org/",
observation = "https://observation.org/",
wikiaves = "https://www.wikiaves.com.br/",
`xeno-canto` = "https://www.xeno-canto.org/"
)
urls <- urls[match(names(metadata_list), names(urls))]
token <- c(
gbif = "No",
inaturalist = "No",
`macaulay library` =  "No",
observation = "Yes",
wikiaves = "No",
`xeno-canto` = "Yes"
)
token <- token[match(names(metadata_list), names(token))]
tax_level <-  c(
gbif = "Species",
inaturalist = "Species",
`macaulay library` =  "Species",
observation = "Species",
wikiaves = "Species",
`xeno-canto` = "Species, subspecies, genus, family, group"
)
tax_level <- tax_level[match(names(metadata_list), names(tax_level))]
geo_cover <-  c(
gbif = "Worldwide",
inaturalist = "Worldwide",
`macaulay library` =  "Worldwide",
observation = "Worldwide",
wikiaves = "Brazil",
`xeno-canto` = "Worldwide"
)
geo_cover <- geo_cover[match(names(metadata_list), names(geo_cover))]
other <-  c(
gbif = "Specify query by data base",
inaturalist = NA,
`macaulay library` =  "Interactive",
observation = NA,
wikiaves = NA,
`xeno-canto` = "Specify query by taxonomy, geographic range and dates"
)
other <- other[match(names(metadata_list), names(other))]
colnames <- lapply(metadata_list, names)
colnames <- lapply(colnames, function(x)
setdiff(x, suwo:::.format_query_output(only_basic_columns = TRUE)))
additional_data <- sapply(colnames, function(x)
paste(x, collapse = ", "))
additional_data <- additional_data[match(names(metadata_list), names(additional_data))]
query_summary <- data.frame(
Function = Function,
Repository = Repository,
`URL link` = urls,
`File types` = file_types,
`Requires api key` = token,
`Taxonomic level` = tax_level,
`Geographic coverage` = geo_cover,
`Additional data` = additional_data,
`Other features` = other,
stringsAsFactors = FALSE,
check.names = FALSE
)
query_summary$`URL link` <- kableExtra::cell_spec(query_summary$`URL link`,
"html",
link = query_summary$`URL link`,
new_tab = TRUE)
query_summary$Function <- kableExtra::cell_spec(
query_summary$Function,
"html",
link = paste0(
"https://marce10.github.io/suwo/reference/",
query_summary$Function,
".html"
),
new_tab = TRUE
)
query_summary[, names(query_summary) != "Additional data"] |>
kableExtra::kbl(
caption = "Table 1: Summary of query functions.",
format = "html",
escape = FALSE,
row.names = FALSE
) |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "left"
)
library(knitr)
library(kableExtra)
metadata_list <-  vignette_metadata <- suwo:::vignette_metadata
metadata_list$t_tricolor <- NULL
Repository <- sapply(metadata_list, function(x)
x[1, "repository"])
names(metadata_list) <- tolower(Repository)
Function <- sapply(metadata_list, function(x)
attributes(x)$query_call[[1]])
Function <- sapply(Function, as.character)
file_types <- sapply(Function, function(x)
paste(formals(x)$format, collapse = ", "))
file_types <- gsub("c, ", "", file_types)
file_types[Function == "query_xenocanto"] <- "sound"
urls = c(
gbif = "https://www.gbif.org/",
inaturalist = "https://www.inaturalist.org/",
`macaulay library` =  "https://www.macaulaylibrary.org/",
observation = "https://observation.org/",
wikiaves = "https://www.wikiaves.com.br/",
`xeno-canto` = "https://www.xeno-canto.org/"
)
urls <- urls[match(names(metadata_list), names(urls))]
token <- c(
gbif = "No",
inaturalist = "No",
`macaulay library` =  "No",
observation = "Yes",
wikiaves = "No",
`xeno-canto` = "Yes"
)
token <- token[match(names(metadata_list), names(token))]
tax_level <-  c(
gbif = "Species",
inaturalist = "Species",
`macaulay library` =  "Species",
observation = "Species",
wikiaves = "Species",
`xeno-canto` = "Species, subspecies, genus, family, group"
)
tax_level <- tax_level[match(names(metadata_list), names(tax_level))]
geo_cover <-  c(
gbif = "Worldwide",
inaturalist = "Worldwide",
`macaulay library` =  "Worldwide",
observation = "Worldwide",
wikiaves = "Brazil",
`xeno-canto` = "Worldwide"
)
geo_cover <- geo_cover[match(names(metadata_list), names(geo_cover))]
other <-  c(
gbif = "Specify query by data base",
inaturalist = NA,
`macaulay library` =  "Interactive",
observation = NA,
wikiaves = NA,
`xeno-canto` = "Specify query by taxonomy, geographic range and dates"
)
other <- other[match(names(metadata_list), names(other))]
colnames <- lapply(metadata_list, names)
colnames <- lapply(colnames, function(x)
setdiff(x, suwo:::.format_query_output(only_basic_columns = TRUE)))
additional_data <- sapply(colnames, function(x)
paste(x, collapse = ", "))
additional_data <- additional_data[match(names(metadata_list), names(additional_data))]
query_summary <- data.frame(
Function = Function,
Repository = Repository,
`URL link` = urls,
`File types` = file_types,
`Requires api key` = token,
`Taxonomic level` = tax_level,
`Geographic coverage` = geo_cover,
`Additional data` = additional_data,
`Other features` = other,
stringsAsFactors = FALSE,
check.names = FALSE
)
query_summary <- query_summary[order(query_summary$Repository),]
query_summary$`URL link` <- kableExtra::cell_spec(query_summary$`URL link`,
"html",
link = query_summary$`URL link`,
new_tab = TRUE)
query_summary$Function <- kableExtra::cell_spec(
query_summary$Function,
"html",
link = paste0(
"https://marce10.github.io/suwo/reference/",
query_summary$Function,
".html"
),
new_tab = TRUE
)
query_summary[, names(query_summary) != "Additional data"] |>
kableExtra::kbl(
caption = "Table 1: Summary of query functions.",
format = "html",
escape = FALSE,
row.names = FALSE
) |>
kableExtra::kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "left"
)
a_hahneli
c_eisentrauti <- head(query_inaturalist(term = "Chorthippus eisentrauti"), 4)
h_harpyja <- head(query_wikiaves(term = "Harpia harpyja"), 4)
a_hahneli <- query_xenocanto(term = "Ameerega hahneli", api_key = Sys.getenv("XENO_CANTO_API_KEY"))
p_lotor <- head(query_gbif(term = "Procyon lotor", format = "video"), 4)
t_rufiventris <- head(query_macaulay(term = "Turdus rufiventris", format = "sound", path = tempdir()), 4)
t_tricolor <- head(query_xenocanto(term = "Thyroptera tricolor", api_key = Sys.getenv("XENO_CANTO_API_KEY")), 4)
vignette_metadata <- list(c_eisentrauti = c_eisentrauti, h_harpyja = h_harpyja, a_hahneli = a_hahneli, p_lotor = p_lotor, t_tricolor = t_tricolor, t_rufiventris = t_rufiventris)
vignette_metadata <- list(c_eisentrauti = c_eisentrauti, h_harpyja = h_harpyja, a_hahneli = a_hahneli, p_lotor = p_lotor, t_tricolor = t_tricolor, t_rufiventris = t_rufiventris)
usethis::use_data(ml_taxon_code, merged_metadata, vignette_metadata, internal = TRUE, overwrite = TRUE)
a_hahneli
View(a_hahneli)
#run document twice
devtools::document(".")
devtools::document(".")
devtools::check(document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
#run document twice
devtools::document(".")
devtools::document(".")
devtools::check(document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# c_eisentrauti <- head(query_inaturalist(term = "Chorthippus eisentrauti"), 4)
h_wagneriana <- head(query_inaturalist(term = "Heliconia sarapiquensis"), 4)
# c_eisentrauti <- head(query_inaturalist(species = "Chorthippus eisentrauti"), 4)
h_wagneriana <- head(query_inaturalist(species = "Heliconia sarapiquensis"), 4)
# c_eisentrauti <- head(query_inaturalist(species = "Chorthippus eisentrauti"), 4)
h_wagneriana <- head(query_inaturalist(species = "Heliconia wagneriana"), 4)
# c_eisentrauti <- head(query_inaturalist(species = "Chorthippus eisentrauti"), 4)
h_wagneriana <- head(query_inaturalist(species = "Heliconia sarapiquensis", format = "sound"), 4)
# c_eisentrauti <- head(query_inaturalist(species = "Chorthippus eisentrauti"), 4)
h_wagneriana <- head(query_inaturalist(species = "Heliconia sarapiquensis", format = "image"), 4)
vignette_metadata <- list(h_wagneriana = h_wagneriana, h_harpyja = h_harpyja, a_hahneli = a_hahneli, p_lotor = p_lotor, t_tricolor = t_tricolor, t_rufiventris = t_rufiventris, h_sarapiquensis = h_sarapiquensis)
usethis::use_data(ml_taxon_code, merged_metadata, vignette_metadata, internal = TRUE, overwrite = TRUE)
h_sarapiquensis <- head(query_inaturalist(species = "Heliconia sarapiquensis", format = "image"), 4)
vignette_metadata <- list(h_wagneriana = h_wagneriana, h_harpyja = h_harpyja, a_hahneli = a_hahneli, p_lotor = p_lotor, t_tricolor = t_tricolor, t_rufiventris = t_rufiventris, h_sarapiquensis = h_sarapiquensis)
usethis::use_data(ml_taxon_code, merged_metadata, vignette_metadata, internal = TRUE, overwrite = TRUE)
vignette_metadata
metadata_list <-  vignette_metadata
devtools::install()
p_striigularis <- head(query_macaulay(species = "Phaethornis striigularis", format = "video", path = tempdir()), 4)
vignette_metadata <- list(h_wagneriana = h_wagneriana, h_harpyja = h_harpyja, a_hahneli = a_hahneli, p_lotor = p_lotor, t_tricolor = t_tricolor, t_rufiventris = t_rufiventris, h_sarapiquensis = h_sarapiquensis, p_striigularis = p_striigularis)
usethis::use_data(ml_taxon_code, merged_metadata, vignette_metadata, internal = TRUE, overwrite = TRUE)
devtools::install()
species <- "sp:asdasd"
grep(":", species)
grepl(":", species)
other_tags = c('cnt:"costa rica"', "q:A")
species <- "asdas asdasd"
species_name <- ifelse(grepl("\\s", species), paste0('"', species, '"'), species)
# Prepend the required 'sp:' tag to the species name
query <- paste0("sp:", species_name)
query
# Start the query parts with the formatted species query
parts <- c(query)
other_tags = c('cnt:"costa rica"', "q:A")
parts <- c(parts, other_tags)
# Collapse into a single query string
query_str <- paste(parts, collapse = " ")
query_str
df1 <- query_xenocanto(
species = 'Phaethornis anthophilus',
raw_data = TRUE,
api_key = Sys.getenv("XENO_CANTO_API_KEY")
)
View(df1)
View(df1)
source("~/Dropbox/R_package_testing/suwo/R/query_xenocanto.R")
df1 <- query_xenocanto(
species = 'sp:"Phaethornis anthophilus" cnt:"costa rica" q:"A"',
raw_data = TRUE,
api_key = Sys.getenv("XENO_CANTO_API_KEY")
)
df1 <- query_xenocanto(
species = 'sp:"Phaethornis anthophilus" cnt:"panama" q:"A"',
raw_data = TRUE,
api_key = Sys.getenv("XENO_CANTO_API_KEY")
)
df1 <- query_xenocanto(
species = 'sp:"Phaethornis anthophilus" cnt:"Panama" q:"A"',
raw_data = TRUE,
api_key = Sys.getenv("XENO_CANTO_API_KEY")
)
species = 'sp:"Phaethornis anthophilus" cnt:"Panama" q:"A"'
species
# --- build query from tags ---
# Handle species names with spaces by wrapping them in quotes for the query
if (!grepl(":", species)){
species_name <- ifelse(grepl("\\s", species), paste0('"', species, '"'), species)
# Prepend the required 'sp:' tag to the species name
query_str <- paste0("sp:", species_name)
} else {
# Collapse into a single query string
query_str <- paste(species, collapse = " ")
}
query_str
# URL encode (spaces -> %20, quotes -> %22, etc.)
query_str <- utils::URLencode(query_str, reserved = TRUE)
query_str
df1 <- query_xenocanto(
species = '"sp":"Phaethornis anthophilus" "cnt":"Panama" "q":"A"',
raw_data = TRUE,
api_key = Sys.getenv("XENO_CANTO_API_KEY")
)
df1 <- query_xenocanto(
species = '"sp":"Phaethornis anthophilus" "cnt":"Panama" "q":"A"',
raw_data = TRUE,
api_key = Sys.getenv("XENO_CANTO_API_KEY")
)
df1 <- query_xenocanto(
species = '"sp":"Phaethornis anthophilus" cnt:"Panama"',
raw_data = TRUE,
api_key = Sys.getenv("XENO_CANTO_API_KEY")
)
df1 <- query_xenocanto(
species = 'sp:"Phaethornis anthophilus" cnt:"Panama"',
raw_data = TRUE,
api_key = Sys.getenv("XENO_CANTO_API_KEY")
)
femsong <- query_xenocanto(species = 'sp:"Thryothorus ludovicianus" type:"song" type:"female"'), api_key = Sys.getenv("XENO_CANTO_API_KEY"))
femsong <- query_xenocanto(species = 'sp:"Thryothorus ludovicianus" type:"song" type:"female"', api_key = Sys.getenv("XENO_CANTO_API_KEY"))
query_xenocanto(species = 'sp:"Panyptila cayennensis" cnt:"costa rica" q:"A"', api_key = Sys.getenv("XENO_CANTO_API_KEY")
)
femsong
nrow(femsong)
a_hahneli
a_hahneli <- query_xenocanto(species = "Ameerega hahneli", api_key = "YOUR_XC_API_KEY")
# replace "YOUR_XC_API_KEY" with your key
a_hahneli <- query_xenocanto(species = "Ameerega hahneli", api_key = "YOUR_XC_API_KEY")
a_hahneli <- query_xenocanto(species = "Ameerega hahneli", api_key = Sys.getenv("XENO_CANTO_API_KEY"))
a_hahneli
View(a_hahneli)
a_hahneli <- query_xenocanto(species = 'sp:"Ameerega hahneli" cnt:"French Guiana" q:"A"', api_key = Sys.getenv("XENO_CANTO_API_KEY"))
View(a_hahneli)
vignette_metadata <- list(h_wagneriana = h_wagneriana, h_harpyja = h_harpyja, a_hahneli = a_hahneli, p_lotor = p_lotor, t_tricolor = t_tricolor, t_rufiventris = t_rufiventris, h_sarapiquensis = h_sarapiquensis, p_striigularis = p_striigularis)
usethis::use_data(ml_taxon_code, merged_metadata, vignette_metadata, internal = TRUE, overwrite = TRUE)
vignette_metadata$a_hahneli
devtools::document(".")
devtools::document(".")
devtools::check(document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
vignette_metadata <- list(h_wagneriana = h_wagneriana, h_harpyja = h_harpyja, a_hahneli = a_hahneli, p_lotor = p_lotor, t_tricolor = t_tricolor, t_rufiventris = t_rufiventris, h_sarapiquensis = h_sarapiquensis, p_striigularis = p_striigularis)
usethis::use_data(ml_taxon_code, merged_metadata, vignette_metadata, internal = TRUE, overwrite = TRUE)
df1 <- query_xenocanto(
species = 'sp:"Phaethornis anthophilus" cnt:"Panama"',
raw_data = TRUE,
api_key = Sys.getenv("XENO_CANTO_API_KEY")
)
nrow(df1)
df1 <- query_xenocanto(
species = 'Phaethornis anthophilus',
raw_data = TRUE,
api_key = Sys.getenv("XENO_CANTO_API_KEY")
)
ncol(df1)
df1 <- query_xenocanto(
species = 'Phaethornis anthophilus',
all_data = FALSE,
api_key = Sys.getenv("XENO_CANTO_API_KEY")
)
expected_col_names <- .format_query_output(only_basic_columns = T)
query_col_names <- colnames(df1)
all(expected_col_names %in% query_col_names) && all(query_col_names %in% expected_col_names)
devtools::document(".")
devtools::document(".")
devtools::check(document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
gb1 <- query_gbif(species = 'Glaucis dohrnii', format = "image", all_data = TRUE)
test_keys <- c("5154503342", "4525343483")
sgb1 <- subset(gb1, key %in% test_keys)
a <- download_media(metadata = sgb1, path = tempdir())
fls <- list.files(path = tempdir(), pattern = "jpeg$|png$")
gb1 <- query_gbif(species = 'Glaucis dohrnii', format = "image", all_data = TRUE)
source("~/Dropbox/R_package_testing/suwo/R/query_gbif.R")
gb1 <- query_gbif(species = 'Glaucis dohrnii', format = "image", all_data = TRUE)
test_keys <- c("5154503342", "4525343483")
sgb1 <- subset(gb1, key %in% test_keys)
a <- download_media(metadata = sgb1, path = tempdir())
a
View(a)
fls <- list.files(path = tempdir(), pattern = "jpeg$|png$")
# remove files
unlink(file.path(tempdir(), fls))
# expected files
expected_files <- c("Glaucis_dohrnii-GBIF5154503342.png", "Glaucis_dohrnii-GBIF4525343483.jpeg")
all(expected_files %in% fls)
all(a$download_file_name %in% expected_files)
df1 <- query_xenocanto(
species = 'Phaethornis anthophilus',
all_data = TRUE,
api_key = Sys.getenv("XENO_CANTO_API_KEY")
)
nrow(df1)
ncol(df1)
devtools::install()
devtools::document(".")
devtools::document(".")
devtools::check(document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
library(suwo)
dh<-d_holocanthus <- query_gbif(species = "Diodon holocanthus", format = "image")
set.seed(666)
d_holocanthus <- d_holocanthus[sample(1:nrow(d_holocanthus), 6),]
# create folder for images
out_folder <- file.path(tempdir(), "diodon_holocanthus")
dir.create(out_folder)
# download media files creating sub-directories by country
dhol_files <- download_media(metadata = d_holocanthus,
path = out_folder,
folder_by = "country")
fs::dir_tree(path = out_folder)
# create a 6 pannel plot of the downloaded images
par(mfrow = c(2, 3), mar = c(1, 1, 2, 1))
for (i in 1:6) {
img <- jpeg::readJPEG(file.path(out_folder, dhol_files$downloaded_file_name[i]))
plot(
1:2,
type = 'n',
axes = FALSE
)
rasterImage(img, 1, 1, 2, 2)
title(main = paste(
dhol_files$country[i],
dhol_files$date[i],
sep = "\n"
))
}
dhol_files$downloaded_file_name
d_holocanthus <- dh
d_holocanthus$file_extension
# keep only JPEG records (for simplicity for this vignette)
d_holocanthus <- d_holocanthus[d_holocanthus$file_extension == ".jpeg", ]
# select 6 random JPEG records
set.seed(666)
d_holocanthus <- d_holocanthus[sample(1:nrow(d_holocanthus), 6),]
d_holocanthus
d_holocanthus <- dh
nrow(sh)
nrow(dh)
d_holocanthus$file_extension
# keep only JPEG records (for simplicity for this vignette)
d_holocanthus <- d_holocanthus[d_holocanthus$file_extension == "jpeg", ]
# select 6 random JPEG records
set.seed(666)
d_holocanthus <- d_holocanthus[sample(1:nrow(d_holocanthus), 6),]
# create folder for images
out_folder <- file.path(tempdir(), "diodon_holocanthus")
dir.create(out_folder)
# download media files creating sub-directories by country
dhol_files <- download_media(metadata = d_holocanthus,
path = out_folder,
folder_by = "country")
fs::dir_tree(path = out_folder)
dhol_files$downloaded_file_name
# create a 6 pannel plot of the downloaded images
par(mfrow = c(2, 3), mar = c(1, 1, 2, 1))
for (i in 1:6) {
img <- jpeg::readJPEG(file.path(out_folder, dhol_files$downloaded_file_name[i]))
plot(
1:2,
type = 'n',
axes = FALSE
)
rasterImage(img, 1, 1, 2, 2)
title(main = paste(
dhol_files$country[i],
dhol_files$date[i],
sep = "\n"
))
}
load("~/Dropbox/R_package_testing/suwo/R/sysdata.rda")
attach(vignette_metadata)
d_holocanthus <- dh
# keep only JPEG records (for simplicity for this vignette)
d_holocanthus <- d_holocanthus[d_holocanthus$file_extension == "jpeg", ]
# select 6 random JPEG records
set.seed(666)
d_holocanthus <- d_holocanthus[sample(1:nrow(d_holocanthus), 6),]
vignette_metadata <- list(
h_wagneriana = h_wagneriana,
h_harpyja = h_harpyja,
a_hahneli = a_hahneli,
p_lotor = p_lotor,
t_tricolor = t_tricolor,
t_rufiventris = t_rufiventris,
h_sarapiquensis = h_sarapiquensis,
p_striigularis = p_striigularis,
d_holocanthus = d_holocanthus
)
usethis::use_data(
ml_taxon_code,
merged_metadata,
vignette_metadata,
internal = TRUE,
overwrite = TRUE
)
devtools::install()
View(d_holocanthus)
d_holocanthus$country
d_holocanthus$country[1]
d_holocanthus$country[1] <- NA
d_holocanthus$country
# download media files creating sub-directories by country
dhol_files <- download_media(metadata = d_holocanthus,
path = out_folder,
folder_by = "country")
fs::dir_tree(path = out_folder)
source("~/Dropbox/R_package_testing/suwo/R/internal_functions.R")
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
# download media files creating sub-directories by country
dhol_files <- download_media(metadata = d_holocanthus,
path = out_folder,
folder_by = "country")
fs::dir_tree(path = out_folder)
#run document twice
devtools::document(".")
devtools::document(".")
