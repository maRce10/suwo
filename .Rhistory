})
if (pb & verbose) write(file = "", x ="double-checking downloaded files")
#check if some files have no data
fl <- list.files(path = path, pattern = ".mp3$")
size0 <- fl[file.size(file.path(path, fl)) == 0]
#if so redo those files
if (length(size0) > 0)
{  Y <- metadata[metadata$sound.files %in% size0, ]
unlink(size0)
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(Y), cl = cl, FUN = function(x)
{
try(xcFUN(Y, x), silent = TRUE)
})
}
}
download_media <- function(metadata, path = "./", file.name = NULL){
#stop if metadata is not a data frame
if (!is(metadata, "data.frame")) stop("metadata is not a data frame")
#stop if the basic columns are not found
if (!is.null(file.name))
{if (any(!c(file.name, "record.id") %in% colnames(metadata)))
stop(paste(paste(c(file.name, "record.id")[!c(file.name, "record.id") %in% colnames(metadata)], collapse=", "), "column(s) not found in data frame"))} else
if (!"record.id" %in% colnames(metadata))
stop("record.id column not found in data frame")
# # add repository label
# metadata$repository <- NA
# metadata$repository[grepl(pattern = "xeno", x = metadata$url)] <-  "XC"
#download recordings
if (any(file.name == "record.id")) file.name <- file.name[-which(file.name == "record.id")]
if (!is.null(file.name))  {  if (length(which(tolower(names(metadata)) %in% file.name)) > 1)
fn <- apply(metadata[,which(tolower(names(metadata)) %in% file.name)], 1 , paste , collapse = "-" ) else
fn <- metadata[,which(tolower(names(metadata)) %in% file.name)]
metadata$sound.files <- paste(paste(fn, paste0(metadata$repository, metadata$record.id), sep = "-"), ".mp3", sep = "")
} else
metadata$sound.files <- paste0(metadata$repository, metadata$record.id, ".mp3")
xcFUN <-  function(metadata, x){
if (!file.exists(metadata$sound.files[x]))
if(metadata$repository[x] == "XC") {
download.file(
url = paste("https://xeno-canto.org/", metadata$record.id[x], "/download", sep = ""),
destfile = file.path(path, metadata$sound.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
} else (metadata$repository[x] == "wikiaves") {
download.file(
url = metadata$url[x],
destfile = file.path(path, metadata$sound.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
}
return (NULL)
}
# set clusters for windows OS
if (pb  & verbose)
write(file = "", x = "Downloading files...")
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(metadata), cl = cl, FUN = function(x)
{
xcFUN(metadata, x)
})
if (pb & verbose) write(file = "", x ="double-checking downloaded files")
#check if some files have no data
fl <- list.files(path = path, pattern = ".mp3$")
size0 <- fl[file.size(file.path(path, fl)) == 0]
#if so redo those files
if (length(size0) > 0)
{  Y <- metadata[metadata$sound.files %in% size0, ]
unlink(size0)
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(Y), cl = cl, FUN = function(x)
{
try(xcFUN(Y, x), silent = TRUE)
})
}
}
download_media <- function(metadata, path = "./", file.name = NULL){
#stop if metadata is not a data frame
if (!is(metadata, "data.frame")) stop("metadata is not a data frame")
#stop if the basic columns are not found
if (!is.null(file.name))
{if (any(!c(file.name, "record.id") %in% colnames(metadata)))
stop(paste(paste(c(file.name, "record.id")[!c(file.name, "record.id") %in% colnames(metadata)], collapse=", "), "column(s) not found in data frame"))} else
if (!"record.id" %in% colnames(metadata))
stop("record.id column not found in data frame")
# # add repository label
# metadata$repository <- NA
# metadata$repository[grepl(pattern = "xeno", x = metadata$url)] <-  "XC"
#download recordings
if (any(file.name == "record.id")) file.name <- file.name[-which(file.name == "record.id")]
if (!is.null(file.name))  {  if (length(which(tolower(names(metadata)) %in% file.name)) > 1)
fn <- apply(metadata[,which(tolower(names(metadata)) %in% file.name)], 1 , paste , collapse = "-" ) else
fn <- metadata[,which(tolower(names(metadata)) %in% file.name)]
metadata$sound.files <- paste(paste(fn, paste0(metadata$repository, metadata$record.id), sep = "-"), ".mp3", sep = "")
} else
metadata$sound.files <- paste0(metadata$repository, metadata$record.id, ".mp3")
xcFUN <-  function(metadata, x){
if (!file.exists(metadata$sound.files[x])) {
if(metadata$repository[x] == "XC") {
download.file(
url = paste("https://xeno-canto.org/", metadata$record.id[x], "/download", sep = ""),
destfile = file.path(path, metadata$sound.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
} else (metadata$repository[x] == "wikiaves") {
download.file(
url = metadata$url[x],
destfile = file.path(path, metadata$sound.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
}
}
return (NULL)
}
# set clusters for windows OS
if (pb  & verbose)
write(file = "", x = "Downloading files...")
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(metadata), cl = cl, FUN = function(x)
{
xcFUN(metadata, x)
})
if (pb & verbose) write(file = "", x ="double-checking downloaded files")
#check if some files have no data
fl <- list.files(path = path, pattern = ".mp3$")
size0 <- fl[file.size(file.path(path, fl)) == 0]
#if so redo those files
if (length(size0) > 0)
{  Y <- metadata[metadata$sound.files %in% size0, ]
unlink(size0)
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(Y), cl = cl, FUN = function(x)
{
try(xcFUN(Y, x), silent = TRUE)
})
}
}
download_media <- function(metadata, path = "./", file.name = NULL){
#stop if metadata is not a data frame
if (!is(metadata, "data.frame")) stop("metadata is not a data frame")
#stop if the basic columns are not found
if (!is.null(file.name))
{if (any(!c(file.name, "record.id") %in% colnames(metadata)))
stop(paste(paste(c(file.name, "record.id")[!c(file.name, "record.id") %in% colnames(metadata)], collapse=", "), "column(s) not found in data frame"))} else
if (!"record.id" %in% colnames(metadata))
stop("record.id column not found in data frame")
# # add repository label
# metadata$repository <- NA
# metadata$repository[grepl(pattern = "xeno", x = metadata$url)] <-  "XC"
#download recordings
if (any(file.name == "record.id")) file.name <- file.name[-which(file.name == "record.id")]
if (!is.null(file.name))  {  if (length(which(tolower(names(metadata)) %in% file.name)) > 1)
fn <- apply(metadata[,which(tolower(names(metadata)) %in% file.name)], 1 , paste , collapse = "-" ) else
fn <- metadata[,which(tolower(names(metadata)) %in% file.name)]
metadata$sound.files <- paste(paste(fn, paste0(metadata$repository, metadata$record.id), sep = "-"), ".mp3", sep = "")
} else
metadata$sound.files <- paste0(metadata$repository, metadata$record.id, ".mp3")
xcFUN <-  function(metadata, x){
if (!file.exists(metadata$sound.files[x]))
download.file(
url = paste("https://xeno-canto.org/", metadata$record.id[x], "/download", sep = ""),
destfile = file.path(path, metadata$sound.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
return (NULL)
}
# set clusters for windows OS
if (pb  & verbose)
write(file = "", x = "Downloading files...")
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(metadata), cl = cl, FUN = function(x)
{
xcFUN(metadata, x)
})
if (pb & verbose) write(file = "", x ="double-checking downloaded files")
#check if some files have no data
fl <- list.files(path = path, pattern = ".mp3$")
size0 <- fl[file.size(file.path(path, fl)) == 0]
#if so redo those files
if (length(size0) > 0)
{  Y <- metadata[metadata$sound.files %in% size0, ]
unlink(size0)
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(Y), cl = cl, FUN = function(x)
{
try(xcFUN(Y, x), silent = TRUE)
})
}
}
download_media <- function(metadata, path = "./", file.name = NULL){
#stop if metadata is not a data frame
if (!is(metadata, "data.frame")) stop("metadata is not a data frame")
#stop if the basic columns are not found
if (!is.null(file.name))
{if (any(!c(file.name, "record.id") %in% colnames(metadata)))
stop(paste(paste(c(file.name, "record.id")[!c(file.name, "record.id") %in% colnames(metadata)], collapse=", "), "column(s) not found in data frame"))} else
if (!"record.id" %in% colnames(metadata))
stop("record.id column not found in data frame")
# # add repository label
# metadata$repository <- NA
# metadata$repository[grepl(pattern = "xeno", x = metadata$url)] <-  "XC"
#download recordings
if (any(file.name == "record.id")) file.name <- file.name[-which(file.name == "record.id")]
if (!is.null(file.name))  {  if (length(which(tolower(names(metadata)) %in% file.name)) > 1)
fn <- apply(metadata[,which(tolower(names(metadata)) %in% file.name)], 1 , paste , collapse = "-" ) else
fn <- metadata[,which(tolower(names(metadata)) %in% file.name)]
metadata$sound.files <- paste(paste(fn, paste0(metadata$repository, metadata$record.id), sep = "-"), ".mp3", sep = "")
} else
metadata$sound.files <- paste0(metadata$repository, metadata$record.id, ".mp3")
xcFUN <-  function(metadata, x){
if (!file.exists(metadata$sound.files[x])){
download.file(
url = paste("https://xeno-canto.org/", metadata$record.id[x], "/download", sep = ""),
destfile = file.path(path, metadata$sound.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
return (NULL)
}
}
# set clusters for windows OS
if (pb  & verbose)
write(file = "", x = "Downloading files...")
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(metadata), cl = cl, FUN = function(x)
{
xcFUN(metadata, x)
})
if (pb & verbose) write(file = "", x ="double-checking downloaded files")
#check if some files have no data
fl <- list.files(path = path, pattern = ".mp3$")
size0 <- fl[file.size(file.path(path, fl)) == 0]
#if so redo those files
if (length(size0) > 0)
{  Y <- metadata[metadata$sound.files %in% size0, ]
unlink(size0)
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(Y), cl = cl, FUN = function(x)
{
try(xcFUN(Y, x), silent = TRUE)
})
}
}
download.file(
url = "https://s3.amazonaws.com/media.wikiaves.com.br/recordings/5751/1575063_5e4de8de1ca51f1d72e27e710129a626.mp3",
destfile = file.path("~/Downloads/delete/", metadata$sound.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
download.file(
url = "https://s3.amazonaws.com/media.wikiaves.com.br/recordings/5751/1575063_5e4de8de1ca51f1d72e27e710129a626.mp3",
destfile = file.path("~/Downloads/delete/", "metadata$sound.files[x]"),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
download_media <- function(metadata, path = "./", file.name = NULL){
#stop if metadata is not a data frame
if (!is(metadata, "data.frame")) stop("metadata is not a data frame")
#stop if the basic columns are not found
if (!is.null(file.name))
{if (any(!c(file.name, "record.id") %in% colnames(metadata)))
stop(paste(paste(c(file.name, "record.id")[!c(file.name, "record.id") %in% colnames(metadata)], collapse=", "), "column(s) not found in data frame"))} else
if (!"record.id" %in% colnames(metadata))
stop("record.id column not found in data frame")
# # add repository label
# metadata$repository <- NA
# metadata$repository[grepl(pattern = "xeno", x = metadata$url)] <-  "XC"
#download recordings
if (any(file.name == "record.id")) file.name <- file.name[-which(file.name == "record.id")]
if (!is.null(file.name))  {  if (length(which(tolower(names(metadata)) %in% file.name)) > 1)
fn <- apply(metadata[,which(tolower(names(metadata)) %in% file.name)], 1 , paste , collapse = "-" ) else
fn <- metadata[,which(tolower(names(metadata)) %in% file.name)]
metadata$sound.files <- paste(paste(fn, paste0(metadata$repository, metadata$record.id), sep = "-"), ".mp3", sep = "")
} else
metadata$sound.files <- paste0(metadata$repository, metadata$record.id, ".mp3")
xcFUN <-  function(metadata, x){
if (!file.exists(metadata$sound.files[x])){
if (metadata$repository[x] == "XC"){
download.file(
url = paste("https://xeno-canto.org/", metadata$record.id[x], "/download", sep = ""),
destfile = file.path(path, metadata$sound.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
return (NULL)
} else if (metadata$repository[x] == "wikiaves"){
download.file(
url = as.character(metadata$url[x]),
destfile = file.path(path, metadata$sound.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
return (NULL)
}
}
}
# set clusters for windows OS
if (pb  & verbose)
write(file = "", x = "Downloading files...")
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(metadata), cl = cl, FUN = function(x)
{
xcFUN(metadata, x)
})
if (pb & verbose) write(file = "", x ="double-checking downloaded files")
#check if some files have no data
fl <- list.files(path = path, pattern = ".mp3$")
size0 <- fl[file.size(file.path(path, fl)) == 0]
#if so redo those files
if (length(size0) > 0)
{  Y <- metadata[metadata$sound.files %in% size0, ]
unlink(size0)
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(Y), cl = cl, FUN = function(x)
{
try(xcFUN(Y, x), silent = TRUE)
})
}
}
df1
download_media(df1)
download_media(df1, pb = "FALSE", verbose = "TRUE")
df1 <- query_xenocanto(term = 'Phaethornis anthophilus', download = FALSE)
source("~/Dropbox/R_package_testing/suwo/R/query_xenocanto.R")
df1 <- query_xenocanto(term = 'Phaethornis anthophilus', download = FALSE)
df1 <- query_xenocanto(term = 'Phaethornis anthophilus')
download_media(metadata = df1, path = tempdir())
source("~/Dropbox/R_package_testing/suwo/R/internal_functions.R")
download_media(metadata = df1, path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
download_media <- function(metadata, path = "./", file.name = NULL, pb= "TRUE", verbose = "TRUE"){
#stop if metadata is not a data frame
if (!is(metadata, "data.frame")) stop("metadata is not a data frame")
#stop if the basic columns are not found
if (!is.null(file.name))
{if (any(!c(file.name, "record.id") %in% colnames(metadata)))
stop(paste(paste(c(file.name, "record.id")[!c(file.name, "record.id") %in% colnames(metadata)], collapse=", "), "column(s) not found in data frame"))} else
if (!"record.id" %in% colnames(metadata))
stop("record.id column not found in data frame")
# # add repository label
# metadata$repository <- NA
# metadata$repository[grepl(pattern = "xeno", x = metadata$url)] <-  "XC"
#download recordings
if (any(file.name == "record.id")) file.name <- file.name[-which(file.name == "record.id")]
if (!is.null(file.name))  {  if (length(which(tolower(names(metadata)) %in% file.name)) > 1)
fn <- apply(metadata[,which(tolower(names(metadata)) %in% file.name)], 1 , paste , collapse = "-" ) else
fn <- metadata[,which(tolower(names(metadata)) %in% file.name)]
metadata$sound.files <- paste(paste(fn, paste0(metadata$repository, metadata$record.id), sep = "-"), ".mp3", sep = "")
} else
metadata$sound.files <- paste0(metadata$repository, metadata$record.id, ".mp3")
xcFUN <-  function(metadata, x){
if (!file.exists(metadata$sound.files[x])){
if (metadata$repository[x] == "XC"){
download.file(
url = paste("https://xeno-canto.org/", metadata$record.id[x], "/download", sep = ""),
destfile = file.path(path, metadata$sound.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
return (NULL)
} else if (metadata$repository[x] == "wikiaves"){
download.file(
url = as.character(metadata$url[x]),
destfile = file.path(path, metadata$sound.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
return (NULL)
}
}
}
# set clusters for windows OS
if (pb  & verbose)
write(file = "", x = "Downloading files...")
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(metadata), cl = cl, FUN = function(x)
{
xcFUN(metadata, x)
})
if (pb & verbose) write(file = "", x ="double-checking downloaded files")
#check if some files have no data
fl <- list.files(path = path, pattern = ".mp3$")
size0 <- fl[file.size(file.path(path, fl)) == 0]
#if so redo those files
if (length(size0) > 0)
{  Y <- metadata[metadata$sound.files %in% size0, ]
unlink(size0)
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(Y), cl = cl, FUN = function(x)
{
try(xcFUN(Y, x), silent = TRUE)
})
}
}
download_media(metadata = df1, path = tempdir())
download_media <- function(metadata, path = "./", file.name = NULL, pb= TRUE, verbose = TRUE){
#stop if metadata is not a data frame
if (!is(metadata, "data.frame")) stop("metadata is not a data frame")
#stop if the basic columns are not found
if (!is.null(file.name))
{if (any(!c(file.name, "record.id") %in% colnames(metadata)))
stop(paste(paste(c(file.name, "record.id")[!c(file.name, "record.id") %in% colnames(metadata)], collapse=", "), "column(s) not found in data frame"))} else
if (!"record.id" %in% colnames(metadata))
stop("record.id column not found in data frame")
# # add repository label
# metadata$repository <- NA
# metadata$repository[grepl(pattern = "xeno", x = metadata$url)] <-  "XC"
#download recordings
if (any(file.name == "record.id")) file.name <- file.name[-which(file.name == "record.id")]
if (!is.null(file.name))  {  if (length(which(tolower(names(metadata)) %in% file.name)) > 1)
fn <- apply(metadata[,which(tolower(names(metadata)) %in% file.name)], 1 , paste , collapse = "-" ) else
fn <- metadata[,which(tolower(names(metadata)) %in% file.name)]
metadata$sound.files <- paste(paste(fn, paste0(metadata$repository, metadata$record.id), sep = "-"), ".mp3", sep = "")
} else
metadata$sound.files <- paste0(metadata$repository, metadata$record.id, ".mp3")
xcFUN <-  function(metadata, x){
if (!file.exists(metadata$sound.files[x])){
if (metadata$repository[x] == "XC"){
download.file(
url = paste("https://xeno-canto.org/", metadata$record.id[x], "/download", sep = ""),
destfile = file.path(path, metadata$sound.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
return (NULL)
} else if (metadata$repository[x] == "wikiaves"){
download.file(
url = as.character(metadata$url[x]),
destfile = file.path(path, metadata$sound.files[x]),
quiet = TRUE,  mode = "wb", cacheOK = TRUE,
extra = getOption("download.file.extra"))
return (NULL)
}
}
}
# set clusters for windows OS
if (pb  & verbose)
write(file = "", x = "Downloading files...")
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(metadata), cl = cl, FUN = function(x)
{
xcFUN(metadata, x)
})
if (pb & verbose) write(file = "", x ="double-checking downloaded files")
#check if some files have no data
fl <- list.files(path = path, pattern = ".mp3$")
size0 <- fl[file.size(file.path(path, fl)) == 0]
#if so redo those files
if (length(size0) > 0)
{  Y <- metadata[metadata$sound.files %in% size0, ]
unlink(size0)
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
a1 <- pblapply_sw_int(pbar = pb, X = 1:nrow(Y), cl = cl, FUN = function(x)
{
try(xcFUN(Y, x), silent = TRUE)
})
}
}
download_media(metadata = df1, path = tempdir())
cores = 2
download_media(metadata = df1, path = tempdir())
cores = 1
download_media(metadata = df1, path = tempdir())
download_media(metadata = df1, path = tempdir())
df1 <- query_wikiaves(term = 'Glaucis dohrnii', type =  "audio", verbose = FALSE, pb = FALSE)
download_media(metadata = df1, path = tempdir())
tempdir()
download_media(metadata = df1, path = "/home/neuro/Downloads/delete")
df1 <- query_xenocanto(term = 'Phaethornis anthophilus')
df1
df1$repository <- "XC"
df1
source("~/Dropbox/R_package_testing/suwo/R/query_xenocanto.R")
df1 <- query_xenocanto(term = 'Phaethornis anthophilus')
df1
download_media(metadata = df1, path = "/home/neuro/Downloads/delete")
download_media(metadata = df1, path = "/home/neuro/Downloads/delete")
query_wikiaves("cyanoleuca", type = "audio", cores = 2)
df2 <- query_wikiaves("Glaucis dohrnii", type = "audio", cores = 2)
download_media(df2,path = "~/Downloads/delete/")
query_xenocanto("Phaethornis anthophilus", cores = 2)
df1 <- query_xenocanto("Phaethornis anthophilus", cores = 2)
df1
download_media(df1,path = "~/Downloads/delete/")
download_media(df2,path = "~/Downloads/delete/", cores = 1)
df1 <- query_xenocanto("Phaethornis anthophilus", cores = 1)
download_media(df1,path = "~/Downloads/delete/")
knit_with_parameters("~/Dropbox/R_package_testing/suwo/README.Rmd")
read.table("~/Downloads/")
term = "Sound"
#format JSON
term <- gsub(" ", "%20", term)
base.srch.pth <- paste0("https://api.gbif.org/v1/occurrence/search?&", "media_type=", term)
#initialize search
q <- rjson::fromJSON(file = paste0(base.srch.pth, term))
count <- q$results$count
count
