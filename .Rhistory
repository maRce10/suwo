file_path
file_path <- changedFiles(snapshot)[grep("\\.csv$",changedFiles(snapshot))]
file_path <- changedFiles(snapshot)[grep("\\.csv$",changedFiles(snapshot))]
grep("\\.csv$",changedFiles(snapshot))
file_path <- changedFiles(snapshot)[grep("\\.csv",changedFiles(snapshot))]
file_path
grep("\\.csv",changedFiles(snapshot))
changedFiles(snapshot)
grep("\\.csv",changedFiles(snapshot))
changedFiles(snapshot)[grep("\\.csv",changedFiles(snapshot))]
changed_files <- changedFiles(snapshot)
file_path <- changed_files[grep("\\.csv",changed_files)]
file_path
file_path <- changed_files[grep("\\.csv$",changed_files)]
file_path
grep("\\.csv$",changed_files)
changed_files <- changedFiles(snapshot)
changed_files
changed_files[0]
changed_files[1]
file_path <- changed_files[1][grep("\\.csv$",changed_files[1])]
file_path
grep("\\.csv$",changed_files[1])
changed_files[1]
changed_files[2]
changed_files[3]
changed_files[1]
changed_files[1][1]
changed_files[1,]
changed_files[,1]
changed_files[1]
source("D:/JORGE/DB/Dropbox/Jorge Elizondo/suwo/suwo/R/query_macaulay.R")
source("D:/JORGE/DB/Dropbox/Jorge Elizondo/suwo/suwo/R/query_macaulay.R")
source("D:/JORGE/DB/Dropbox/Jorge Elizondo/suwo/suwo/R/query_macaulay.R")
#run document twice
devtools::document(".")
update.packages("htmltools")
update.packages(htmltools)
#run document twice
devtools::document(".")
installed.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
taxon_code_df <- read_csv("Clements-v2023-October-2023.csv")
library(readr)
Clements_v2023_October_2023 <- read_csv("Clements-v2023-October-2023.csv")
View(Clements_v2023_October_2023)
taxon_code_df <- Clements_v2023_October_2023
#run document twice
devtools::document(".")
install.packages("htmltools")
#run document twice
devtools::document(".")
update.packages("vctrs")
install.packages(vctrs)
install.packages("vctrs")
install.packages("vctrs")
#run document twice
devtools::document(".")
rm(list = c("query_macaulay"))
#run document twice
devtools::document(".")
find_taxon_code <- function(species_name, data_frame) {
taxon_code <- taxon_code_df$species_code[data_frame$'scientific name' == user_input_species]
if (length(taxon_code) > 0) {
return(taxon_code[1])
} else {
return(NULL)
}
}
find_taxon_code("Turdus grayi", taxon_codes_csv)
taxon_code_df <- read.csv("Clements-v2023-October-2023.csv")
find_taxon_code("Turdus grayi", taxon_codes_csv)
find_taxon_code <- function(species_name, data_frame) {
taxon_code <- data_frame$species_code[data_frame$'scientific name' == species_name]
if (length(taxon_code) > 0) {
return(taxon_code[1])
} else {
return(NULL)
}
}
find_taxon_code("Turdus grayi", taxon_codes_csv)
View(taxon_code_df)
find_taxon_code("Struthio camelus", taxon_codes_csv)
find_taxon_code <- function(species_name, data_frame) {
taxon_code <- data_frame$species_code[data_frame$scientific.name == species_name]
if (length(taxon_code) > 0) {
return(taxon_code[1])
} else {
return(NULL)
}
}
find_taxon_code("Struthio camelus", taxon_codes_csv)
find_taxon_code("Turdus grayi", taxon_codes_csv)
devtools::document(".")
query_macaulay(term = "Turdus grayi", type = "audio")
<<<<<<< Updated upstream
source("~/Documents/GitHub/suwo/R/map_locations.R")
rm(map?xc)
rm(map_xc)
#run document twice
devtools::document(".")
#run document twice
devtools::document(".")
X <- query_inaturalist(term = "turdus grayi",type = "still image")
X <- query_inaturalist(term = "turdus grayi",type = "audio")
X <- query_inaturalist(term = "turdus grayi",type = "sound")
X <- query_inaturalist(term = "turdus grayi",type = "sound")
X <- query_observation(term = "turdus grayi",type = "sound")
X <- query_wikiaves(term = "turdus grayi",type = "sound")
X <- query_wikiaves(term = "phaetornis ruber",type = "sound")
X <- query_wikiaves(term = "phaethornis ruber",type = "sound")
map_instances(X)
# make lat lon numeric and remove rows with no coords
X$Latitude <- as.numeric(as.character(X$latitude))
#run document twice
devtools::document(".")
map_instances(X)
#Change the names of the variables of latitude and longitude
names(X)[names(X) == "latitude"] <- "Latitude"
head(X)
View(X)
X <- query_inaturalist(term = "phaethornis aethopygus",type = "sound")
X <- query_inaturalist(term = "phaethornis ruber",type = "sound")
query_xenocanto(term = "phaethornis ruber", type = "sound")
X <- query_xenocanto(term = "phaethornis ruber", type = "audio")
X <- query_xenocanto(term = "phaethornis ruber")
map_instances(X)
#Change the names of the variables of latitude and longitude
names(X)[names(X) == "latitude"] <- "Latitude"
names(X)[names(X) == "longitude"] <- "Longitude"
X$Latitude <- as.numeric(as.character(X$Latitude))
X$Longitude <- as.numeric(as.character(X$Longitude))
X <- X[!is.na(X$Latitude) & !is.na(X$Longitude), , drop = FALSE]
# stop if no rows left
if (nrow(X) == 0) stop2("not  a single  with observation has coordinates")
# if no leatfet map
if (!leaflet.map) {
# if it argument is not "jpeg" or "tiff"
if (!any(it == "jpeg", it == "tiff")) stop2(paste("Image type", it, "not allowed"))
# get species names (common name)
spn <- length(unique(X$English_name))
# reset graphic device
try(dev.off(), silent = TRUE)
# Set threshold for maximum number of panels per plot device
if (spn <= 16) mat <- par(mfrow = c(ceiling(sqrt(spn)), round(sqrt(spn), 0))) else par(mfrow = c(4, 4))
par(mar = rep(0, 4))
# Create a map per species, with the recordings plotted over each map
for (i in sort(unique(X$species))) {
y <- X[X$species == i, ]
if (all(length(y$Latitude) > 0, length(y$Longitude) > 0)) {
if (abs(max(y$Longitude) - min(y$Longitude)) < 38) buf <- 12 else buf <- 5
if (img) {
prop <- abs((min(y$Longitude) - buf) - (max(y$Longitude) + buf)) / abs((min(y$Latitude) - buf) - (max(y$Latitude) + buf)) * 1.15
img_wrlbr_int(
filename = paste("Map of ", i, " recordings", it, sep = ""),
width = 480 * prop, path = path
)
# change margins
# par(mar = rep(2.5,4))
# add empty  map
maps::map("world",
xlim = c(min(y$Longitude) - buf, max(y$Longitude) + buf), interior = FALSE,
ylim = c(min(y$Latitude) - buf, max(y$Latitude) + buf), fill = FALSE
)
# change background color
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4],
col =
cm.colors(10)[3]
)
# plot lat lon lines in background
abline(h = seq(-90, 90, 5), col = "white", lwd = 0.9)
abline(h = seq(-90, 90, 10), col = "white", lwd = 1.1)
abline(v = seq(-180, 180, 5), col = "white", lwd = 0.9)
abline(v = seq(-180, 180, 10), col = "white", lwd = 1.1)
# add map
maps::map("world",
xlim = c(min(y$Longitude) - buf, max(y$Longitude) + buf), add = TRUE,
ylim = c(min(y$Latitude) - buf, max(y$Latitude) + buf), fill = TRUE,
col = terrain.colors(10)[5], myborder = 0, interior = F, lty = 2
)
mtext("Longitude (DD)", side = 1, line = 2)
mtext("Latitude (DD)", side = 2, line = 2)
mtext(i, side = 3, line = 1, cex = 1.4, font = 4)
# add axes
maps::map.axes()
# add contour lines
maps::map("world",
xlim = c(min(y$Longitude) - buf, max(y$Longitude) + buf), interior = FALSE,
ylim = c(min(y$Latitude) - buf, max(y$Latitude) + buf), fill = FALSE, add = TRUE
)
# add points
points(y$Longitude, y$Latitude, pch = 21, cex = 1.8, col = "#E37222", bg = "#E37222")
# add labels
if (labels) {
text(y$Longitude, y$Latitude, labels = X$Recording_ID, cex = 0.7, pos = 4)
}
# add scale
maps::map.scale(ratio = FALSE, relwidth = 0.4)
dev.off()
} else {
# change margins
if (par()$mfrow[1] > 2) par(mfrow = c(2, 2))
if (par()$mfrow[1] > 1) u <- 0 else u <- 2
par(mar = rep(u, 4), mai = rep(0.2, 4))
# add empty  map
maps::map("world",
xlim = c(min(y$Longitude) - buf, max(y$Longitude) + buf), interior = FALSE,
ylim = c(min(y$Latitude) - buf, max(y$Latitude) + buf), fill = FALSE
)
# change background color
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4],
col =
adjustcolor("#07889B", alpha.f = 0.2)
)
# plot lat lon lines in background
abline(h = seq(-90, 90, 5), col = "white", lwd = 0.9)
abline(h = seq(-90, 90, 10), col = "white", lwd = 1.1)
abline(v = seq(-180, 180, 5), col = "white", lwd = 0.9)
abline(v = seq(-180, 180, 10), col = "white", lwd = 1.1)
# add map
maps::map("world",
xlim = c(min(y$Longitude) - buf, max(y$Longitude) + buf), add = TRUE,
ylim = c(min(y$Latitude) - buf, max(y$Latitude) + buf), fill = TRUE, col = "white"
)
maps::map("world",
xlim = c(min(y$Longitude) - buf, max(y$Longitude) + buf), add = TRUE,
ylim = c(min(y$Latitude) - buf, max(y$Latitude) + buf), fill = TRUE,
col = adjustcolor("darkolivegreen2", alpha.f = 0.7), myborder = 0, interior = F, lty = 2
)
mtext("Longitude (DD)", side = 1, line = 2)
mtext("Latitude (DD)", side = 2, line = 2)
mtext(i, side = 3, line = 1, cex = 1, font = 4)
# add axes
maps::map.axes()
# add contour lines
maps::map("world",
xlim = c(min(y$Longitude) - buf, max(y$Longitude) + buf), interior = FALSE,
ylim = c(min(y$Latitude) - buf, max(y$Latitude) + buf), fill = FALSE, add = TRUE
)
# add points
points(y$Longitude, y$Latitude, pch = 21, cex = 1.3, bg = "white")
points(y$Longitude, y$Latitude, pch = 21, cex = 1.3, col = "gray3", bg = adjustcolor("#E37222", alpha.f = 0.7), lwd = 0.7)
# add labels
if (labels) {
text(y$Longitude, y$Latitude, labels = X$Recording_ID, cex = 0.7, pos = 4)
}
# add scale
maps::map.scale(ratio = FALSE, relwidth = 0.4)
}
}
}
} else { # if leaflet map
cols <- c("red", "darkred", "lightred", "orange", "beige", "green", "darkgreen", "lightgreen", "blue", "darkblue", "lightblue", "purple", "darkpurple", "pink", "cadetblue", "gray", "lightgray", "black")[c(c(1, 6, 12) + rep(1:6, each = 3), 1)]
# repeat many times so colors are "recycled"
cols <- rep(cols, 100)
# change NAs in subspecies
X$Subspecies <- as.character(X$Subspecies)
X$Subspecies[is.na(X$Subspecies) | X$Subspecies == ""] <- "not provided"
# if only one species use subspecies for color marker
if (length(unique((X$species))) == 1) {
# label pop up markers
X$labels <- X$Subspecies
X$labels[X$labels == "not provided"] <- "Subsp. not provided"
} else {
# labels for hovering
X$labels <- X$species
}
# color for marker
mrkcol <- cols[1:(length(unique(X$labels)))][as.numeric(as.factor(X$labels))]
mrkcol[X$labels == "Subsp. not provided"] <- "white"
# use ios icons with marker colors
icons <- leaflet::awesomeIcons(
icon = "ios-close",
iconColor = "black",
library = "ion",
markerColor = mrkcol
)
# make content for popup
content <- paste0("<b><a href='https://www.xeno-canto.org/", X$Recording_ID, "'>", paste0("XC", X$Recording_ID), "</a></b>", "<br/><i>", paste(X$Genus, X$Specific_epithet, sep = " "), "</i><br/> Subspecies: ", X$Subspecies, "<br/> Country: ", X$Country, "<br/> Locality: ", X$Locality, "<br/> Voc.type: ", X$Vocalization_type, "<br/> Recordist: ", X$Recordist, paste0("<b><a href='https://www.xeno-canto.org/", X$Recording_ID, "/download'>", "<br/>", "listen</a>"))
# make base map
leaf.map <- leaflet::leaflet(X)
# add tiles
leaf.map <- leaflet::addTiles(leaf.map)
# add markers
if (leaflet.cluster) {
leaf.map <- leaflet::addAwesomeMarkers(
map = leaf.map, ~Longitude, ~Latitude, icon = icons, label = ~labels, popup = content, data = X, clusterOptions = leaflet::markerClusterOptions(),
clusterId = "rec.cluster"
)
} else {
leaf.map <- leaflet::addAwesomeMarkers(map = leaf.map, ~Longitude, ~Latitude, icon = icons, label = ~labels, popup = content, data = X)
}
# add minimap view at bottom right
leaf.map <- leaflet::addMiniMap(leaf.map)
# add zoom-out button
leaf.map <- leaflet::addEasyButton(leaf.map, leaflet::easyButton(
icon = "fa-globe", title = "Zoom to full view",
onClick = leaflet::JS("function(btn, map){ map.setZoom(1); }")
))
if (leaflet.cluster) {
leaf.map <- leaflet::addEasyButton(leaf.map, leaflet::easyButton(
states = list(
leaflet::easyButtonState(
stateName = "unfrozen-markers",
icon = "ion-toggle",
title = "Freeze Clusters",
onClick = leaflet::JS("
function(btn, map) {
var clusterManager =
map.layerManager.getLayer('cluster', 'rec.cluster');
clusterManager.freezeAtZoom();
btn.state('frozen-markers');
}")
),
leaflet::easyButtonState(
stateName = "frozen-markers",
icon = "ion-toggle-filled",
title = "UnFreeze Clusters",
onClick = leaflet::JS("
function(btn, map) {
var clusterManager =
map.layerManager.getLayer('cluster', 'rec.cluster');
clusterManager.unfreeze();
btn.state('unfrozen-markers');
}")
)
)
))
}
# plot map
leaf.map
}
#run document twice
devtools::document(".")
map_instances(X)
#run document twice
devtools::document(".")
map_instances(X)
map_instances(X, leaflet.map = TRUE)
#run document twice
devtools::document(".")
map_instances(X, leaflet.map = TRUE)
library(suwo)
devtools::document(".")
Calo <- query_inaturalist(term = "Hymenoxys texana", type = "still image" )
Calo <- query_inaturalist(term = "Hymenoxys texana", type = "still image" )
Calochort <- ggplot() +
geom_map(data = states_usa, map = states_usa,
aes(x = long, y = lat, map_id = region),
color = 'black', fill = "azure", size = 0.3) +  # Add state borders for the USA
geom_map(data = states_mexico, map = states_mexico,
aes(x = long, y = lat, map_id = region),
color = 'black', fill = "honeydew", size = 0.3) +  # Add country borders for Mexico
geom_map(data = states_canada, map = states_canada,
aes(x = long, y = lat, map_id = region),
color = 'black', fill = "lavender", size = 0.3) +  # Add country borders for Canada
scale_fill_gradient(name = 'Elevation (m)', low = 'white', high = 'black') +
coord_sf(xlim = c(-125, -90), ylim = c(12, 50)) +
geom_point(mapping = aes(x = as.numeric(longitude),
y = as.numeric(latitude),
colour = Calochortus,
fill = Calochortus,
shape = Calochortus),
data = Calo, cex = 0.25) +
scale_shape_manual(name = 'Calochortus', values = c(22, 21, 24, 23)) +
scale_color_manual(values = c('grey26', '#000000', '#000000', '#000000')) +
scale_fill_manual(values = c('grey76', '#1E88E5', '#FF880A', '#8C0808')) +
theme_bw() +
theme(panel.grid.major = element_blank(),  # Remove major gridlines
panel.grid.minor = element_blank())  # Remove minor gridlines
#install.packages('ggplot2')
library(ggplot2)
Calochort <- ggplot() +
geom_map(data = states_usa, map = states_usa,
aes(x = long, y = lat, map_id = region),
color = 'black', fill = "azure", size = 0.3) +  # Add state borders for the USA
geom_map(data = states_mexico, map = states_mexico,
aes(x = long, y = lat, map_id = region),
color = 'black', fill = "honeydew", size = 0.3) +  # Add country borders for Mexico
geom_map(data = states_canada, map = states_canada,
aes(x = long, y = lat, map_id = region),
color = 'black', fill = "lavender", size = 0.3) +  # Add country borders for Canada
scale_fill_gradient(name = 'Elevation (m)', low = 'white', high = 'black') +
coord_sf(xlim = c(-125, -90), ylim = c(12, 50)) +
geom_point(mapping = aes(x = as.numeric(longitude),
y = as.numeric(latitude),
colour = Calochortus,
fill = Calochortus,
shape = Calochortus),
data = Calo, cex = 0.25) +
scale_shape_manual(name = 'Calochortus', values = c(22, 21, 24, 23)) +
scale_color_manual(values = c('grey26', '#000000', '#000000', '#000000')) +
scale_fill_manual(values = c('grey76', '#1E88E5', '#FF880A', '#8C0808')) +
theme_bw() +
theme(panel.grid.major = element_blank(),  # Remove major gridlines
panel.grid.minor = element_blank())  # Remove minor gridlines
#install.packages("dplyr")
library("dplyr")
#install.packages('raster')
library(raster) # For raster creation and manipulation
#install.packages('maptools')
library(maptools)
#install.packages('ggspatial')
library(ggspatial)
install.packages('ggspatial')
#install.packages('ggspatial')
library(ggspatial)
install.packages('sf')
install.packages("sf")
#install.packages('sf')
library(sf)
install.packages('sf')
install.packages("sf")
#install.packages('sf')
library(sf)
#install.packages('ggnewscale')
library(ggnewscale)
install.packages('ggnewscale')
#install.packages('ggnewscale')
library(ggnewscale)
map_locations(Calo)
=======
install.packages("dplyr")
library(dplyr)
library(readr)
# Function to read and combine all result files
combine_results <- function(input_dir, output_file) {
# Get list of all txt files in the directory
file_list <- list.files(path = input_dir, pattern = "\\_results\\.txt$", full.names = TRUE)
# Read and combine all result files
combined_data <- lapply(file_list, read_tsv) %>%
bind_rows()
# Write combined data to a new file
write_tsv(combined_data, output_file)
}
# Set directory containing the result files and output file name
input_directory <- "C:/Users/JORGE/Desktop/Hojas"
output_filename <- "C:/Users/JORGE/Desktop/Hojas/combined_results.txt"
# Call the function to combine results
combine_results(input_directory, output_filename)
library(dplyr)
library(readr)
# Function to read and combine all result files with image identification
combine_results_with_image_id <- function(input_dir, output_file) {
# Get list of all txt files in the directory
file_list <- list.files(path = input_dir, pattern = "\\_results\\.txt$", full.names = TRUE)
# Initialize an empty data frame to store combined data
combined_data <- data.frame()
# Loop through each file and read the data
for (i in seq_along(file_list)) {
# Read the current file
current_data <- read_tsv(file_list[i])
# Extract the image name from the file name
image_name <- tools::file_path_sans_ext(basename(file_list[i]))
# Add a new column for the image name
current_data <- current_data %>%
mutate(Image = image_name)
# Append the current data to the combined data frame
combined_data <- bind_rows(combined_data, current_data)
}
# Write combined data to a new file
write_tsv(combined_data, output_file)
}
# Set directory containing the result files and output file name
input_directory <- "C:/Users/JORGE/Desktop/Hojas"
output_filename <- "C:/Users/JORGE/Desktop/Hojas/combined_results.txt"
# Call the function to combine results
combine_results_with_image_id(input_directory, output_filename)
>>>>>>> Stashed changes
#run document twice
devtools::document(".")
query_inaturalist(term = "turdus grayi", type = "still image")
query_inaturalist(term = "turdus grayi", type = "still image")
#run document twice
devtools::document(".")
query_inaturalist(term = "turdus grayi", type = "still image")
query_inaturalist(term = "turdus grayi", type = "still image")
#run document twice
devtools::document(".")
query_inaturalist(term = "turdus grayi", type = "still image")
query_inaturalist(term = "engystomops pustulosus", type = "still image")
#run document twice
devtools::document(".")
query_inaturalist(term = "engystomops pustulosus", type = "still image")
#run document twice
devtools::document(".")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
devtools::document(".")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
#run document twice
devtools::document(".")
test <- query_inaturalist(tem = "turdus grayi", type = "still image")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
#run document twice
devtools::document(".")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
number_results <- seq(0, by = 201, length.out = 1000
number_results <- seq(0, by = 201, length.out = 1000)
number_results <- seq(0, by = 201, length.out = 1000)
number_results
number_results <- list()
devtools::document(".")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
devtools::document(".")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
