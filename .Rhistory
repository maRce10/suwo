<<<<<<< HEAD
=======
if (length(taxon_code) > 0) {
return(taxon_code[1])
} else {
return(NULL)
}
}
find_taxon_code("Turdus grayi", taxon_codes_csv)
taxon_code_df <- read.csv("Clements-v2023-October-2023.csv")
find_taxon_code("Turdus grayi", taxon_codes_csv)
find_taxon_code <- function(species_name, data_frame) {
taxon_code <- data_frame$species_code[data_frame$'scientific name' == species_name]
if (length(taxon_code) > 0) {
return(taxon_code[1])
} else {
return(NULL)
}
}
find_taxon_code("Turdus grayi", taxon_codes_csv)
View(taxon_code_df)
find_taxon_code("Struthio camelus", taxon_codes_csv)
find_taxon_code <- function(species_name, data_frame) {
taxon_code <- data_frame$species_code[data_frame$scientific.name == species_name]
if (length(taxon_code) > 0) {
return(taxon_code[1])
} else {
return(NULL)
}
}
find_taxon_code("Struthio camelus", taxon_codes_csv)
find_taxon_code("Turdus grayi", taxon_codes_csv)
devtools::document(".")
query_macaulay(term = "Turdus grayi", type = "audio")
<<<<<<< Updated upstream
source("~/Documents/GitHub/suwo/R/map_locations.R")
rm(map?xc)
rm(map_xc)
#run document twice
devtools::document(".")
#run document twice
devtools::document(".")
X <- query_inaturalist(term = "turdus grayi",type = "still image")
X <- query_inaturalist(term = "turdus grayi",type = "audio")
X <- query_inaturalist(term = "turdus grayi",type = "sound")
X <- query_inaturalist(term = "turdus grayi",type = "sound")
X <- query_observation(term = "turdus grayi",type = "sound")
X <- query_wikiaves(term = "turdus grayi",type = "sound")
X <- query_wikiaves(term = "phaetornis ruber",type = "sound")
X <- query_wikiaves(term = "phaethornis ruber",type = "sound")
map_instances(X)
# make lat lon numeric and remove rows with no coords
X$Latitude <- as.numeric(as.character(X$latitude))
#run document twice
devtools::document(".")
map_instances(X)
#Change the names of the variables of latitude and longitude
names(X)[names(X) == "latitude"] <- "Latitude"
head(X)
View(X)
X <- query_inaturalist(term = "phaethornis aethopygus",type = "sound")
X <- query_inaturalist(term = "phaethornis ruber",type = "sound")
query_xenocanto(term = "phaethornis ruber", type = "sound")
X <- query_xenocanto(term = "phaethornis ruber", type = "audio")
X <- query_xenocanto(term = "phaethornis ruber")
map_instances(X)
#Change the names of the variables of latitude and longitude
names(X)[names(X) == "latitude"] <- "Latitude"
names(X)[names(X) == "longitude"] <- "Longitude"
X$Latitude <- as.numeric(as.character(X$Latitude))
X$Longitude <- as.numeric(as.character(X$Longitude))
X <- X[!is.na(X$Latitude) & !is.na(X$Longitude), , drop = FALSE]
# stop if no rows left
if (nrow(X) == 0) stop2("not  a single  with observation has coordinates")
# if no leatfet map
if (!leaflet.map) {
# if it argument is not "jpeg" or "tiff"
if (!any(it == "jpeg", it == "tiff")) stop2(paste("Image type", it, "not allowed"))
# get species names (common name)
spn <- length(unique(X$English_name))
# reset graphic device
try(dev.off(), silent = TRUE)
# Set threshold for maximum number of panels per plot device
if (spn <= 16) mat <- par(mfrow = c(ceiling(sqrt(spn)), round(sqrt(spn), 0))) else par(mfrow = c(4, 4))
par(mar = rep(0, 4))
# Create a map per species, with the recordings plotted over each map
for (i in sort(unique(X$species))) {
y <- X[X$species == i, ]
if (all(length(y$Latitude) > 0, length(y$Longitude) > 0)) {
if (abs(max(y$Longitude) - min(y$Longitude)) < 38) buf <- 12 else buf <- 5
if (img) {
prop <- abs((min(y$Longitude) - buf) - (max(y$Longitude) + buf)) / abs((min(y$Latitude) - buf) - (max(y$Latitude) + buf)) * 1.15
img_wrlbr_int(
filename = paste("Map of ", i, " recordings", it, sep = ""),
width = 480 * prop, path = path
)
# change margins
# par(mar = rep(2.5,4))
# add empty  map
maps::map("world",
xlim = c(min(y$Longitude) - buf, max(y$Longitude) + buf), interior = FALSE,
ylim = c(min(y$Latitude) - buf, max(y$Latitude) + buf), fill = FALSE
)
# change background color
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4],
col =
cm.colors(10)[3]
)
# plot lat lon lines in background
abline(h = seq(-90, 90, 5), col = "white", lwd = 0.9)
abline(h = seq(-90, 90, 10), col = "white", lwd = 1.1)
abline(v = seq(-180, 180, 5), col = "white", lwd = 0.9)
abline(v = seq(-180, 180, 10), col = "white", lwd = 1.1)
# add map
maps::map("world",
xlim = c(min(y$Longitude) - buf, max(y$Longitude) + buf), add = TRUE,
ylim = c(min(y$Latitude) - buf, max(y$Latitude) + buf), fill = TRUE,
col = terrain.colors(10)[5], myborder = 0, interior = F, lty = 2
)
mtext("Longitude (DD)", side = 1, line = 2)
mtext("Latitude (DD)", side = 2, line = 2)
mtext(i, side = 3, line = 1, cex = 1.4, font = 4)
# add axes
maps::map.axes()
# add contour lines
maps::map("world",
xlim = c(min(y$Longitude) - buf, max(y$Longitude) + buf), interior = FALSE,
ylim = c(min(y$Latitude) - buf, max(y$Latitude) + buf), fill = FALSE, add = TRUE
)
# add points
points(y$Longitude, y$Latitude, pch = 21, cex = 1.8, col = "#E37222", bg = "#E37222")
# add labels
if (labels) {
text(y$Longitude, y$Latitude, labels = X$Recording_ID, cex = 0.7, pos = 4)
}
# add scale
maps::map.scale(ratio = FALSE, relwidth = 0.4)
dev.off()
} else {
# change margins
if (par()$mfrow[1] > 2) par(mfrow = c(2, 2))
if (par()$mfrow[1] > 1) u <- 0 else u <- 2
par(mar = rep(u, 4), mai = rep(0.2, 4))
# add empty  map
maps::map("world",
xlim = c(min(y$Longitude) - buf, max(y$Longitude) + buf), interior = FALSE,
ylim = c(min(y$Latitude) - buf, max(y$Latitude) + buf), fill = FALSE
)
# change background color
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4],
col =
adjustcolor("#07889B", alpha.f = 0.2)
)
# plot lat lon lines in background
abline(h = seq(-90, 90, 5), col = "white", lwd = 0.9)
abline(h = seq(-90, 90, 10), col = "white", lwd = 1.1)
abline(v = seq(-180, 180, 5), col = "white", lwd = 0.9)
abline(v = seq(-180, 180, 10), col = "white", lwd = 1.1)
# add map
maps::map("world",
xlim = c(min(y$Longitude) - buf, max(y$Longitude) + buf), add = TRUE,
ylim = c(min(y$Latitude) - buf, max(y$Latitude) + buf), fill = TRUE, col = "white"
)
maps::map("world",
xlim = c(min(y$Longitude) - buf, max(y$Longitude) + buf), add = TRUE,
ylim = c(min(y$Latitude) - buf, max(y$Latitude) + buf), fill = TRUE,
col = adjustcolor("darkolivegreen2", alpha.f = 0.7), myborder = 0, interior = F, lty = 2
)
mtext("Longitude (DD)", side = 1, line = 2)
mtext("Latitude (DD)", side = 2, line = 2)
mtext(i, side = 3, line = 1, cex = 1, font = 4)
# add axes
maps::map.axes()
# add contour lines
maps::map("world",
xlim = c(min(y$Longitude) - buf, max(y$Longitude) + buf), interior = FALSE,
ylim = c(min(y$Latitude) - buf, max(y$Latitude) + buf), fill = FALSE, add = TRUE
)
# add points
points(y$Longitude, y$Latitude, pch = 21, cex = 1.3, bg = "white")
points(y$Longitude, y$Latitude, pch = 21, cex = 1.3, col = "gray3", bg = adjustcolor("#E37222", alpha.f = 0.7), lwd = 0.7)
# add labels
if (labels) {
text(y$Longitude, y$Latitude, labels = X$Recording_ID, cex = 0.7, pos = 4)
}
# add scale
maps::map.scale(ratio = FALSE, relwidth = 0.4)
}
}
}
} else { # if leaflet map
cols <- c("red", "darkred", "lightred", "orange", "beige", "green", "darkgreen", "lightgreen", "blue", "darkblue", "lightblue", "purple", "darkpurple", "pink", "cadetblue", "gray", "lightgray", "black")[c(c(1, 6, 12) + rep(1:6, each = 3), 1)]
# repeat many times so colors are "recycled"
cols <- rep(cols, 100)
# change NAs in subspecies
X$Subspecies <- as.character(X$Subspecies)
X$Subspecies[is.na(X$Subspecies) | X$Subspecies == ""] <- "not provided"
# if only one species use subspecies for color marker
if (length(unique((X$species))) == 1) {
# label pop up markers
X$labels <- X$Subspecies
X$labels[X$labels == "not provided"] <- "Subsp. not provided"
} else {
# labels for hovering
X$labels <- X$species
}
# color for marker
mrkcol <- cols[1:(length(unique(X$labels)))][as.numeric(as.factor(X$labels))]
mrkcol[X$labels == "Subsp. not provided"] <- "white"
# use ios icons with marker colors
icons <- leaflet::awesomeIcons(
icon = "ios-close",
iconColor = "black",
library = "ion",
markerColor = mrkcol
)
# make content for popup
content <- paste0("<b><a href='https://www.xeno-canto.org/", X$Recording_ID, "'>", paste0("XC", X$Recording_ID), "</a></b>", "<br/><i>", paste(X$Genus, X$Specific_epithet, sep = " "), "</i><br/> Subspecies: ", X$Subspecies, "<br/> Country: ", X$Country, "<br/> Locality: ", X$Locality, "<br/> Voc.type: ", X$Vocalization_type, "<br/> Recordist: ", X$Recordist, paste0("<b><a href='https://www.xeno-canto.org/", X$Recording_ID, "/download'>", "<br/>", "listen</a>"))
# make base map
leaf.map <- leaflet::leaflet(X)
# add tiles
leaf.map <- leaflet::addTiles(leaf.map)
# add markers
if (leaflet.cluster) {
leaf.map <- leaflet::addAwesomeMarkers(
map = leaf.map, ~Longitude, ~Latitude, icon = icons, label = ~labels, popup = content, data = X, clusterOptions = leaflet::markerClusterOptions(),
clusterId = "rec.cluster"
)
} else {
leaf.map <- leaflet::addAwesomeMarkers(map = leaf.map, ~Longitude, ~Latitude, icon = icons, label = ~labels, popup = content, data = X)
}
# add minimap view at bottom right
leaf.map <- leaflet::addMiniMap(leaf.map)
# add zoom-out button
leaf.map <- leaflet::addEasyButton(leaf.map, leaflet::easyButton(
icon = "fa-globe", title = "Zoom to full view",
onClick = leaflet::JS("function(btn, map){ map.setZoom(1); }")
))
if (leaflet.cluster) {
leaf.map <- leaflet::addEasyButton(leaf.map, leaflet::easyButton(
states = list(
leaflet::easyButtonState(
stateName = "unfrozen-markers",
icon = "ion-toggle",
title = "Freeze Clusters",
onClick = leaflet::JS("
function(btn, map) {
var clusterManager =
map.layerManager.getLayer('cluster', 'rec.cluster');
clusterManager.freezeAtZoom();
btn.state('frozen-markers');
}")
),
leaflet::easyButtonState(
stateName = "frozen-markers",
icon = "ion-toggle-filled",
title = "UnFreeze Clusters",
onClick = leaflet::JS("
function(btn, map) {
var clusterManager =
map.layerManager.getLayer('cluster', 'rec.cluster');
clusterManager.unfreeze();
btn.state('unfrozen-markers');
}")
)
)
>>>>>>> f7fbb4d14f0016fa5e055a5f509cc412e9a9f66f
))
}
leaf.map
source("~/Dropbox/R_package_testing/suwo/R/map_locations.R")
# create map
map_locations(metadata = metadata_xc)
dev.off()
# create map
map_locations(metadata = metadata_xc)
source("~/Dropbox/R_package_testing/suwo/R/map_locations.R")
source("~/Dropbox/R_package_testing/suwo/R/map_locations.R")
# create map
map_locations(metadata = metadata_xc)
metadata_xc2 <- query_xenocanto(term = "Phaethornis anthophilus")
# create map
map_locations(metadata = metadata_xc2)
metadata_ob <- query_gbif(term = "Phaethornis ruber", type = "sound")
# create map
map_locations(metadata_ob)
names(metadata_ob)
metadata_ob$decimalLatitude
# styler::style_dir("./R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
devtools::document(".")
devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE)
# styler::style_dir("./R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
devtools::document(".")
#run document twice
devtools::document(".")
devtools::document(".")
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE)
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE)
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE)
# styler::style_dir("./R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
devtools::document(".")
devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE)
# styler::style_dir("./R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
devtools::document(".")
devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE)
# styler::style_dir("./R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
devtools::document(".")
devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE)
# styler::style_dir("./R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
devtools::document(".")
devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# styler::style_dir("./R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
devtools::document(".")
devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = FALSE, run_dont_test = FALSE, vignettes = FALSE, manual = FALSE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
pkgcheck::pkgcheck(path = ".")
installed.packages("ctags")
install.packages("ctags")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
query_result_GBIF <- query_gbif(term = 'Turdus iliacus', type = "sound")
query_result_GBIF <- query_gbif(term = 'Turdus iliacus', type = "sound")
query_result_GBIF <- query_gbif(term = 'Turdus iliacus', type = "sound")
query_result_GBIF <- query_gbif(term = 'Turdus iliacus', type = "sound")
query_result_GBIF <- query_gbif(term = 'Turdus iliacus', type = "sound")
query_result_Wikiaves <- query_wikiaves(term = "Phaethornis nattereri", type = "still image")
#run document twice
devtools::document(".")
rm(list = c("query_gbif", "query_observation"))
#run document twice
devtools::document(".")
query_result_Wikiaves <- query_wikiaves(term = "Phaethornis nattereri", type = "still image")
query_result_Xenocanto <- query_xenocanto(term = "Phaethornis anthophilus")
query_result_Xenocanto <- query_xenocanto(term = "Phaethornis anthophilus")
query_result_Wikiaves <- query_wikiaves(term = "Phaethornis nattereri", type = "still image")
query_result_Wikiaves <- query_wikiaves(term = "Phaethornis nattereri", type = "still image")
devtools::check()
# devtools::install()
pkgs <- c("remotes", "RCurl", "jsonlite", "crayon", "devtools", "leaflet", "maps", "pkgcheck", "pkgstats", "testthat", "styler", "cli")
# install/ load packages
out <- lapply(pkgs, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
rm(list = ls())
# install ctags
# first run in terminal: sudo apt install lsb-core
# then run this with sudo privilege
# ctags_install(bin_dir = NULL, sudo = TRUE)
# load_all()
# run internals
run_ohun_int <- function(){
out <- lapply(list.files(pattern = "ohun_int", path = "./R", full.names = T), source)}
# open working directory
open.wd <- function() system(paste("nautilus", getwd()), show.output.on.console = F)
#open function in rstudio
open.fun <- function(fun) system(paste("rstudio", file.path("./R", paste0(fun, ".R"))))
# run default arguments in a warbleR function
run.def.args <- function(fun = NULL){
#list functions in package
rfiles <- list.files(pattern = ".R", path = "./R", full.names = T)
# select target function file
funfile <- rfiles[gsub(".R", "", basename(rfiles)) == fun]
x <- readLines(funfile, warn = F)
st <- grep('@usage', x, fixed = T)
en <- grep('@param', x, fixed = T)[1]
x <- paste(x[st:(en-1)], collapse = " ")
x <- gsub("usage|\\@|\\#\\'", "", x)
b <- gregexpr(pattern ='\\(|\\)',x)[1][[1]]
x <- substr(x, start = b[1] + 1, stop = b[length(b)] - 1)
spltx <- strsplit(x, "\\,")[[1]]
sl <- vector()
y = 1
while(y <= length(spltx))
{
w <- spltx[y]
z <- 1
if(grepl('\\(', spltx[y]))
{z  <- 0
while(!grepl('\\)', w))
{
z <- z+ 1
w <- paste(w, ",", spltx[y + z], collapse = "")
}
z <- z + 1
}
y = y + z
sl[length(sl) + 1] <- w
}
sl <- sl[sl != "X"]
return(sl)
}
# run it like this:
# for(i in run.def.args("dfts")) try(eval(parse(text = i)), silent = T)
# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$", ignore.case = T, full.names = TRUE))
rm.sf.img <- function(mp3 = TRUE) {if(mp3)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$|\\.tiff$|\\.jpeg$|\\.png$", ignore.case = T, full.names = TRUE)) else
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.wac$|\\.tiff$|\\.jpeg$|\\.png$", ignore.case = T, full.names = TRUE))}
rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.png$|\\.pdf$", ignore.case = T, full.names = TRUE))
#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$", ignore.case = T, full.names = TRUE)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))
#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "./R", ignore.case = TRUE, file.ext = "\\.R$|\\.Rmd$", recursive = TRUE)
{
rfiles <- list.files(pattern = file.ext, path = path, full.names = T, all.files = T, ignore.case = ignore.case, recursive = recursive)
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
if(length(y)>0 & !fun.only) {
print(gsub(pattern = "\\.R", "", (basename(f))))
for(i in y) print(i)
}
if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f)))
# options(nwarnings = 0)
w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "./R", ignore.case = T, file.ext = "\\.R$|\\.Rmd$", recursive = TRUE){
rfiles <- list.files(pattern =file.ext, path = path, full.names = T, all.files = T, ignore.case = ignore.case, recursive = recursive)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#bid data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
#write all wav files in lbh_selec_table
write.sound.files <- function(path = tempdir(), extensible = T, other.formats = FALSE, simulated = FALSE){
# setwd(path)
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = extensible) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = extensible) #save sound files
if (simulated){
# Creating vector for duration
durs <- rep(c(0.3, 1), 5)
# Creating simulated song
set.seed(12)
simulated_1 <- warbleR::simulate_songs(n = 10, durs = durs, freqs = 5, sig2 = 0.01, gaps = 0.5, harms = 1, bgn = 0.1, path = tempdir(), file.name = "simulated_1", selec.table = TRUE, shape = "cos", fin = 0.3, fout = 0.35, samp.rate = 18)
sim_2 <- sim_songs(n = 10, durs = durs, freqs = 5, sig2 = 0.01, gaps = 0.5, harms = 1, bgn = 0.1, path = tempdir(), file.name = "simulated_2", selec.table = TRUE, shape = "cos", fin = 0.3, fout = 0.35, samp.rate = 18, am.amps = c(1, 2, 3, 2, 0.1, 2, 3, 3, 2, 1))
sel_tab2 <- sel_tab1 <- simulated_1$selec.table
sel_tab2$sound.files <- gsub("_1", "_2", sel_tab2$sound.files)
sel_tab <- rbind(sel_tab1, sel_tab2)
return(sel_tab)
}
# if (other.formats){
#   file.copy(from = system.file("extdata", "recording_20170716_230503.wac", package = "bioacoustics"), to = file.path(tempdir(), "recording_20170716_230503.wac"))
#
# file.copy(from = "../Phae.long4.mp3", to = file.path(tempdir(),  "Phae.long4.mp3"))
#
#   file.copy(from = file.path(tempdir(), "Phae.long1.wav"), to = file.path(tempdir(), "Phae.long5.wav"))
#
# wav2flac(file.path(tempdir(), "Phae.long5.wav"))
#
# if (selection.table){
#
#   lbh_selec_table$sound.files <- as.character(lbh_selec_table$sound.files)
#
#   sub_tab <- lbh_selec_table[lbh_selec_table$sound.files %in% c("Phae.long1.wav", "Phae.long4.wav"), 1:7]
#
#   sub_tab$sound.files[sub_tab$sound.files == "Phae.long1.wav"] <- "Phae.long5.flac"
#
#     sub_tab$sound.files[sub_tab$sound.files == "Phae.long4.wav"] <- "Phae.long4.mp3"
#
#     # fix times
#      sub_tab$start[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.2085945, 1.5950019, 2.3057996)
#
#      sub_tab$end[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.3528653, 1.7287163, 2.4289576)
#
#
#     sub_tab <- rbind(sub_tab, data.frame(sound.files = "recording_20170716_230503.wac", channel = 1, selec = 1, start = 0.1, end = 0.3, bottom.freq = 2, top.freq = 10))
#
#     sub_tab <- rbind(sub_tab, lbh_selec_table[, 1:7])
#
#     sub_tab$format <-ifelse(grepl("flac$", sub_tab$sound.files), "flac", ifelse(grepl("mp3$", sub_tab$sound.files), "mp3", "wav"))
#
#
#     return(sub_tab)
# } else return(NULL)
# }
}
# run all warbleR fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
# run.all()
list.selection.table <- function(lbh_selec_table, path = tempdir())
{
crr.dr <- getwd()
on.exit(setwd(crr.dr))
if(!is.null(path)) setwd(path)
Xlist <- list()
Xlist$Xdf <- lbh_selec_table
Xlist$Xst <- selection_table(lbh_selec_table)
Xlist$Xest <- selection_table(lbh_selec_table, extended = T, confirm.extended = F)
lbh_selec_table$song <- as.numeric(lbh_selec_table$sound.files)
Xlist$Xestbs <- selection_table(X = lbh_selec_table, extended = T, by.song = "song", confirm.extended = F)
names(Xlist) <- c("DATA.FRAME", "SELECTION_TABLE", "EXTENDED_SELECTION_TABLE", "by.song.EXTENDED_SELECTION_TABLE")
return(Xlist)
}
bi_mats <- function(X, labels) {
# create empty matrix to store memebership matrix
mat <- matrix(nrow = ncol(X), ncol = ncol(X))
# add labels to row and col names
rownames(mat) <- colnames(mat) <- labels
# add 0 if same lek and 1 if else
out <- lapply(1:(length(labels) - 1), function(i){
sapply((i + 1):length(labels), function(j)
if (labels[i] == labels[j]) 0 else 1)
})
# add to mat
mat[lower.tri(mat)] <- unlist(out)
# retunr as distance matrix
return(as.dist(mat))
}
plot_detection <- function(reference, detection, lwd = 90, sep = 1, labels = detection$selec){
if (!is.null(detection$detection.class)){
labels <- ifelse(detection$detection.class == "true.positive", "\nTP", ifelse(detection$detection.class == "false.positive", "\nFP", ifelse(detection$detection.class == "false.negative", "\nFN", ifelse(detection$detection.class == "true.positive (split)", "\nTPs", ifelse(detection$detection.class == "true.positive (merged)", "\nTPm", ifelse(detection$detection.class == "negative (split)", "\nNs", ifelse(detection$detection.class == "negative (merged)", "\nNm", ifelse(detection$detection.class == "negative (split/merged)", "\nNsm", "\nTPsm"))))))))
detection$labels <- paste0(detection$selec, labels)
} else detection$labels <- detection$selec
old_par <- par()
old_par <- old_par[!names(old_par) %in%  c("cin", "cra", "csi", "cxy", "din", "page")]
on.exit(par(old_par))
par(mar = rep(0, 4))
n_sound.files <- length(unique(c(reference$sound.files, detection$sound.files)))
if (n_sound.files > 1)
par(mfrow = c(n_sound.files, 1))
for (e in unique(c(detection$sound.files, reference$sound.files))){
sub_detec <- detection[detection$sound.files == e, ]
sub_ref <- reference[reference$sound.files == e, ]
plot(x = range(c(sub_detec$start, sub_detec$end, sub_ref$start, sub_ref$end)), y = c(-1, 1), col = "white", pch = 21, yaxt = "n", ylab = "", xaxt = "n", xlab = "")
# plot references first
if (nrow(sub_ref) > 0)
for (i in 1:nrow(sub_ref)){
segments(
x0 = sub_ref$start[i],
x1 = sub_ref$end[i],
y0 = sep / -2,
y1 = sep / -2,
lwd = lwd,
col = viridis::magma(10, alpha = 0.4)[3],
lend = 1
)
text(x = (sub_ref$end[i] + sub_ref$start[i]) / 2, y = sep / -2, labels = i, col = "white")
}
# add detections
if (nrow(sub_detec) > 0)
for (i in 1:nrow(sub_detec)){
segments(
x0 = sub_detec$start[i],
x1 = sub_detec$end[i],
y0 = sep / 2,
y1 = sep / 2,
lwd = lwd,
col = viridis::magma(10, alpha = 0.4)[7],
lend = 1
)
text(x = (sub_detec$end[i] + sub_detec$start[i]) / 2, y = sep / 2, labels = sub_detec$labels[i])
}
}
}
### simulate annotation tables
# cannot have duration shorter than 2
sim_annotation <- function(n = 10, n.sound.files = 1){
sims_l <- lapply(1:n.sound.files, function(x){
possible_start <- seq(0, 98, 2)
sim_ref <- data.frame(sound.files = paste0(x, ".wav"), selec = 1:(n + 1), start = sort(c(sample(possible_start, n), 100)))
sim_ref$end <- NA
for(i in 1:(n))
sim_ref$end[i] <- sim_ref$start[i] + round(runif(n = 1, min = 1, max = sim_ref$start[i + 1] - sim_ref$start[i] - 0.5))
sim_ref <- sim_ref[-nrow(sim_ref), ]
return(sim_ref)
})
sims <- do.call(rbind, sims_l)
return(sims)
}
source("~/Dropbox/R_package_testing/suwo/R/query_gbif.R")
df1 <- query_gbif(term = 'Epidendrum', type = "stillimage", cores = 4)
source("~/Dropbox/R_package_testing/suwo/R/internal_functions.R")
df1 <- query_gbif(term = 'Epidendrum', type = "stillimage", cores = 4)
df1 <- query_gbif(term = 'Epidendrum', type = "still image", cores = 4)
df1 <- query_gbif(term = 'Epidendrum', type = "still image", cores = 20)
df1 <- query_gbif(term = 'Epidendrum barbeyanum', type = "still image", cores = 20)
dir.create("./Downloads/Epidendrum_barbeyanum")
dir.create("~/Downloads/Epidendrum_barbeyanum")
source("~/Dropbox/R_package_testing/suwo/R/download_media.R")
download_media(df1, path = "~/Downloads/Epidendrum_barbeyanum")
download_media(df1, path = "~/Downloads/Epidendrum_barbeyanum", cores = 20)
.Options$suwo$failed_downloads
View(df1)
library(ggplot2)
<<<<<<< HEAD
head(df1)
ggplot(df1, aes(x = month)) +
geom_bar()
df1 <- df1[!is.na(df1$month), ]
df1$month
df1$month <- factor(df1$month, levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
ggplot(df1, aes(x = month)) +
geom_bar()
df1 <- query_gbif(term = 'Epidendrum barbeyanum', type = "still image", cores = 20)
df1 <- df1[!is.na(df1$month), ]
df1$month <- factor(df1$month, levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
df1 <- query_gbif(term = 'Epidendrum barbeyanum', type = "still image", cores = 20)
df1$month <- factor(df1$month, levels = unique(df1$month))
ggplot(df1, aes(x = month)) +
geom_bar()
unique(df1$month)
df1 <- df1[!is.na(df1$month), ]
df1$month
df1$month <- factor(df1$month, levels = sort(unique(df1$month)))
ggplot(df1, aes(x = month)) +
geom_bar()
sort(unique(df1$month))
df1$month <- factor(df1$month, levels = sort(as.numeric(unique(df1$month))))
ggplot(df1, aes(x = month)) +
geom_bar()
df1 <- df1[df1$month != "", ]
df1$month <- factor(df1$month, levels = sort(as.numeric(unique(df1$month))))
ggplot(df1, aes(x = month)) +
geom_bar()
df2 <- query_gbif(term = 'Epidendrum nocturnum', type = "still image", cores = 20)
dir.create("~/Downloads/Epidendrum_nocturnum")
download_media(df2[1:100, ], path = "~/Downloads/Epidendrum_nocturnum", cores = 20)
=======
Calochort <- ggplot() +
geom_map(data = states_usa, map = states_usa,
aes(x = long, y = lat, map_id = region),
color = 'black', fill = "azure", size = 0.3) +  # Add state borders for the USA
geom_map(data = states_mexico, map = states_mexico,
aes(x = long, y = lat, map_id = region),
color = 'black', fill = "honeydew", size = 0.3) +  # Add country borders for Mexico
geom_map(data = states_canada, map = states_canada,
aes(x = long, y = lat, map_id = region),
color = 'black', fill = "lavender", size = 0.3) +  # Add country borders for Canada
scale_fill_gradient(name = 'Elevation (m)', low = 'white', high = 'black') +
coord_sf(xlim = c(-125, -90), ylim = c(12, 50)) +
geom_point(mapping = aes(x = as.numeric(longitude),
y = as.numeric(latitude),
colour = Calochortus,
fill = Calochortus,
shape = Calochortus),
data = Calo, cex = 0.25) +
scale_shape_manual(name = 'Calochortus', values = c(22, 21, 24, 23)) +
scale_color_manual(values = c('grey26', '#000000', '#000000', '#000000')) +
scale_fill_manual(values = c('grey76', '#1E88E5', '#FF880A', '#8C0808')) +
theme_bw() +
theme(panel.grid.major = element_blank(),  # Remove major gridlines
panel.grid.minor = element_blank())  # Remove minor gridlines
#install.packages("dplyr")
library("dplyr")
#install.packages('raster')
library(raster) # For raster creation and manipulation
#install.packages('maptools')
library(maptools)
#install.packages('ggspatial')
library(ggspatial)
install.packages('ggspatial')
#install.packages('ggspatial')
library(ggspatial)
install.packages('sf')
install.packages("sf")
#install.packages('sf')
library(sf)
install.packages('sf')
install.packages("sf")
#install.packages('sf')
library(sf)
#install.packages('ggnewscale')
library(ggnewscale)
install.packages('ggnewscale')
#install.packages('ggnewscale')
library(ggnewscale)
map_locations(Calo)
=======
install.packages("dplyr")
library(dplyr)
library(readr)
# Function to read and combine all result files
combine_results <- function(input_dir, output_file) {
# Get list of all txt files in the directory
file_list <- list.files(path = input_dir, pattern = "\\_results\\.txt$", full.names = TRUE)
# Read and combine all result files
combined_data <- lapply(file_list, read_tsv) %>%
bind_rows()
# Write combined data to a new file
write_tsv(combined_data, output_file)
}
# Set directory containing the result files and output file name
input_directory <- "C:/Users/JORGE/Desktop/Hojas"
output_filename <- "C:/Users/JORGE/Desktop/Hojas/combined_results.txt"
# Call the function to combine results
combine_results(input_directory, output_filename)
library(dplyr)
library(readr)
# Function to read and combine all result files with image identification
combine_results_with_image_id <- function(input_dir, output_file) {
# Get list of all txt files in the directory
file_list <- list.files(path = input_dir, pattern = "\\_results\\.txt$", full.names = TRUE)
# Initialize an empty data frame to store combined data
combined_data <- data.frame()
# Loop through each file and read the data
for (i in seq_along(file_list)) {
# Read the current file
current_data <- read_tsv(file_list[i])
# Extract the image name from the file name
image_name <- tools::file_path_sans_ext(basename(file_list[i]))
# Add a new column for the image name
current_data <- current_data %>%
mutate(Image = image_name)
# Append the current data to the combined data frame
combined_data <- bind_rows(combined_data, current_data)
}
# Write combined data to a new file
write_tsv(combined_data, output_file)
}
# Set directory containing the result files and output file name
input_directory <- "C:/Users/JORGE/Desktop/Hojas"
output_filename <- "C:/Users/JORGE/Desktop/Hojas/combined_results.txt"
# Call the function to combine results
combine_results_with_image_id(input_directory, output_filename)
>>>>>>> Stashed changes
#run document twice
devtools::document(".")
query_inaturalist(term = "turdus grayi", type = "still image")
query_inaturalist(term = "turdus grayi", type = "still image")
#run document twice
devtools::document(".")
query_inaturalist(term = "turdus grayi", type = "still image")
query_inaturalist(term = "turdus grayi", type = "still image")
#run document twice
devtools::document(".")
query_inaturalist(term = "turdus grayi", type = "still image")
query_inaturalist(term = "engystomops pustulosus", type = "still image")
#run document twice
devtools::document(".")
query_inaturalist(term = "engystomops pustulosus", type = "still image")
#run document twice
devtools::document(".")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
devtools::document(".")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
#run document twice
devtools::document(".")
test <- query_inaturalist(tem = "turdus grayi", type = "still image")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
#run document twice
devtools::document(".")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
number_results <- seq(0, by = 201, length.out = 1000
number_results <- seq(0, by = 201, length.out = 1000)
number_results <- seq(0, by = 201, length.out = 1000)
number_results
number_results <- list()
devtools::document(".")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
devtools::document(".")
test <- query_inaturalist(term = "turdus grayi", type = "still image")
readxl::read_xlsx("C:/Users/JORGE/Desktop/BD_MOD_Final.xlsx")
Data_Set <- readxl::read_xlsx("C:/Users/JORGE/Desktop/BD_MOD_Final.xlsx")
View(Data_Set)
Data_Set <- readxl::read_xlsx("C:/Users/JORGE/Desktop/Base_Majo.xlsx")
View(Data_Set)
Data_Set$`Plataform involved` [Data_Set$`Plataform involved` == "1"] <- TRUE
Data_Set$`Academia contact` [Data_Set$`Academia contact` == "1"] <- TRUE
Data_Set$`Verification methodologies` [Data_Set$`Verification methodologies` == "1"] <- TRUE
Data_Set$`Biological group` [Data_Set$`Biological group` == "1"] <- TRUE
Data_Set$Invertebrates [Data_Set$Invertebrates == "1"] <- TRUE
Data_Set$Reptiles [Data_Set$Reptiles == "1"] <- TRUE
Data_Set$Fishes [Data_Set$Fishes == "1"] <- TRUE
Data_Set$Mammals [Data_Set$Mammals == "1"] <- TRUE
Data_Set$`Sharks/rays` [Data_Set$`Sharks/rays` == "1"] <- TRUE
Data_Set$Birds [Data_Set$Birds == "1"] <- TRUE
Data_Set$Plants [Data_Set$Plants == "1"] <- TRUE
Data_Set$Algae [Data_Set$Algae == "1"] <- TRUE
Data_Set$Others [Data_Set$Others == "1"] <- TRUE
Data_Set$`Species presence` [Data_Set$`Species presence` == "1"] <- TRUE
Data_Set$`Ecosystemic stressors` [Data_Set$`Ecosystemic stressors` == "1"] <- TRUE
Data_Set$`Diversity descriptions` [Data_Set$`Diversity descriptions` == "1"] <- TRUE
Data_Set$`Interactions or behaviour` [Data_Set$`Interactions or behaviour` == "1"] <- TRUE
Data_Set$`Genetic or molecular` [Data_Set$`Genetic or molecular` == "1"] <- TRUE
Data_Set$Management...30 [Data_Set$Management...30 == "1"] <- TRUE
Data_Set$`Environmental values` [Data_Set$`Environmental values` == "1"] <- TRUE
Data_Set$`Methodology test` [Data_Set$`Methodology test` == "1"] <- TRUE
Data_Set$`Paleontology/Archeology` [Data_Set$`Paleontology/Archeology` == "1"] <- TRUE
Data_Set$`Oceanography / geomorphology` [Data_Set$`Oceanography / geomorphology` == "1"] <- TRUE
Data_Set$Reef [Data_Set$Reef == "1"] <- TRUE
Data_Set$Shores [Data_Set$Shores == "1"] <- TRUE
Data_Set$Seagrass [Data_Set$Seagrass == "1"] <- TRUE
Data_Set$Mangrove [Data_Set$Mangrove == "1"] <- TRUE
Data_Set$Seamarshes [Data_Set$Seamarshes == "1"] <- TRUE
Data_Set$Estuary [Data_Set$Estuary == "1"] <- TRUE
Data_Set$Other [Data_Set$Other == "1"] <- TRUE
Data_Set$Plan.proy [Data_Set$Plan.proy == "1"] <- TRUE
Data_Set$Fieldwork [Data_Set$Fieldwork == "1"] <- TRUE
Data_Set$Processing [Data_Set$Processing == "1"] <- TRUE
Data_Set$Communication [Data_Set$Communication == "1"] <- TRUE
Data_Set$`Experience Knowledge` [Data_Set$`Experience Knowledge` == "1"] <- TRUE
Data_Set$`Policy change` [Data_Set$`Policy change` == "1"] <- TRUE
Data_Set$`Social implications` [Data_Set$`Social implications` == "1"] <- TRUE
#Change to Management Implications!!!!!
Data_Set$Management...49 [Data_Set$Management...49 == "1"] <- TRUE
Data_Set$Research [Data_Set$Research == "1"] <- TRUE
Data_Set <- readxl::read_xlsx("C:/Users/JORGE/Desktop/Base_Majo.xlsx")
#run document twice
devtools::document(".")
#run document twice
devtools::document(".")
query_wikiaves(term = "Phaethornis nattereri", type = "still image")
#run document twice
devtools::document(".")
avs <- query_wikiaves(term = "Phaethornis nattereri", type = "still image")
library(httr)
avs <- query_wikiaves(term = "Phaethornis nattereri", type = "still image")
View(avs)
#run document twice
devtools::document(".")
avs <- query_wikiaves(term = "Phaethornis nattereri", type = "still image")
#run document twice
devtools::document(".")
avs <- query_wikiaves(term = "Phaethornis nattereri", type = "still image")
#run document twice
devtools::document(".")
avs <- query_wikiaves(term = "Phaethornis nattereri", type = "still image")
>>>>>>> f7fbb4d14f0016fa5e055a5f509cc412e9a9f66f
